{# @pebvariable name="models" type="java.util.ArrayList<org.openapitools.codegen.model.ModelMap>" -#}
{# @pebvariable name="packageName" type="String" #}
{%- for model in models -%}
{% include "./license.pebble" %}
module Line
  module Bot
    module V2
      module {{ packageName | camelize }}
        {% if model.model.description != null -%}
        # {{ model.model.description }}
        {% endif -%}
        {% if model.model.externalDocumentation.description != null -%}
        # {{ model.model.externalDocumentation.description }}
        {% endif -%}
        {% if model.model.externalDocumentation.url != null -%}
        # @see {{ model.model.externalDocumentation.url }}
        {% endif -%}
        class {{ model.model.classname }}{% if model.model.parent != null %} < {{ model.model.parent }}{% endif %}
          {% if not model.model.isEnum -%}
          {% for variable in model.model.vars -%}
          {% if variable.openApiType == 'array' -%}
          {% if variable.items.isModel -%}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name %}attr_accessor{% else %}attr_reader{% endif %} {{ variable.name }}: {{ "Array[#{variable.items.openApiType}]" }}{% if not variable.required %}?{% endif %}
          {% elseif variable.items.allowableValues != null -%}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name %}attr_accessor{% else %}attr_reader{% endif %} {{ variable.name }}: Array[{% for value in variable.items.allowableValues.values %}'{{ value }}'{{ loop.last ? '' : '|' }}{% endfor -%}]{% if not variable.required %}?{% endif %}
          {% else -%}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name %}attr_accessor{% else %}attr_reader{% endif %} {{ variable.name }}: {{ variable.items.openApiType ? "Array[#{typeMapping[variable.items.openApiType]}]" : 'Array[untyped]' }}{% if not variable.required %}?{% endif %}
          {% endif -%}
          {% elseif variable.isModel -%}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name %}attr_accessor{% else %}attr_reader{% endif %} {{ variable.name }}: {{ variable.openApiType }}{% if not variable.required %}?{% endif %}
          {% else -%}
          {% if variable.allowableValues != null -%}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name %}attr_accessor{% else %}attr_reader{% endif %} {{ variable.name }}: {% for value in variable.allowableValues.values %}'{{ value }}'{{ loop.last ? '' : '|' }}{% endfor %}{% if not variable.required %}?{% endif %}
          {% else -%}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name %}attr_accessor{% else %}attr_reader{% endif %} {{ variable.name }}: {{ typeMapping[variable.openApiType] ? typeMapping[variable.openApiType] : 'untyped' }}{% if not variable.required %}?{% endif %}
          {% endif -%}
          {% endif -%}
          {% endfor %}

          {# @param #}
          {%- for variable in model.model.vars -%}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name -%}
          {% if variable.openApiType == 'array' -%}
          {% if variable.items.isModel -%}
          # @param {{ variable.name }} [{{ "Array[#{variable.items.openApiType}, Hash[Symbol, untyped]]" }}{% if not variable.required %},nil{% endif -%}] {{ variable.description }}
          {% elseif variable.items.allowableValues != null -%}
          # @param {{ variable.name }} [Array[{% for value in variable.items.allowableValues.values %}'{{ value }}'{{ loop.last ? '' : ',' }}{% endfor -%}]{% if not variable.required %},nil{% endif -%}] {{ variable.description }}
          {% else -%}
          # @param {{ variable.name }} [{{ variable.items.openApiType ? "Array[#{typeMapping[variable.items.openApiType]}]" : 'Array[untyped]' }}{% if not variable.required %},nil{% endif -%}] {{ variable.description }}
          {% endif -%}
          {% elseif variable.isModel -%}
          # @param {{ variable.name }} [{{ variable.openApiType }}, Hash[Symbol, untyped]{% if not variable.required %}, nil{% endif -%}] {{ variable.description }}
          {% else -%}
          {% if variable.allowableValues != null -%}
          # @param {{ variable.name }} [String{% if not variable.required %},nil{% endif -%}] ({% for value in variable.allowableValues.values %}'{{ value }}'{{ loop.last ? '' : '|' }}{% endfor %}) {{ variable.description }}
          {% else -%}
          # @param {{ variable.name }} [{{ typeMapping[variable.openApiType] ? typeMapping[variable.openApiType] : 'untyped' }}{% if not variable.required %},nil{% endif -%}] {{ variable.description }}
          {% endif -%}
          {% endif -%}
          {% endif -%}
          {% endfor -%}
          def initialize: (
            {% for variable in model.model.vars -%}
            {% if model.model.vendorExtensions.get("x-selector").propertyName != variable.name -%}
            {{ (not variable.required or variable.defaultValue != null) ? '?' : '' }} {#- optioanl parameter => Add '?' #}
            {%- if variable.openApiType == 'array' -%}
            {% if variable.items.isModel -%}
            {{ variable.name }}: {{ "Array[#{variable.items.openApiType}| Hash[Symbol, untyped]]" }}{% if not variable.required %}?{% endif -%}
            {% elseif variable.items.allowableValues != null -%}
            {{ variable.name }}: Array[{% for value in variable.items.allowableValues.values %}'{{ value }}'{{ loop.last ? '' : '|' }}{% endfor -%}]{% if not variable.required %}?{% endif -%}
            {% else -%}
            {{ variable.name }}: {{ variable.items.openApiType ? "Array[#{typeMapping[variable.items.openApiType]}]" : 'Array[untyped]' }}{% if not variable.required %}?{% endif -%}
            {% endif -%}
            {%- elseif variable.isModel -%}
            {{ variable.name }}: {{ variable.openApiType }}{% if not variable.required %}?{% endif -%} | Hash[Symbol, untyped]{% if not variable.required %}?{% endif -%}
            {%- else -%}
            {% if variable.allowableValues != null -%}
            {{ variable.name }}: {% for value in variable.allowableValues.values %}'{{ value }}'{{ loop.last ? '' : '|' }}{% endfor %}{% if not variable.required %}?{% endif -%}
            {% else -%}
            {{ variable.name }}: {{ typeMapping[variable.openApiType] ? typeMapping[variable.openApiType] : 'untyped' }}{% if not variable.required %}?{% endif -%}
            {% endif -%}
            {% endif -%}
            ,
            {% endif -%}
            {%- endfor -%}
            **untyped dynamic_attributes
          ) -> void

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::{{ packageName | camelize }}::{{ model.model.classname }}] Instance of the class
          def self.create: (Hash[Symbol, untyped]) -> {{ model.model.classname }}

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==: (untyped other) -> bool

          # @return [Integer] Hash code of the object
          def hash: () -> Integer
          {%- if model.model.vendorExtensions.get("x-children") != null %}

          private

          def self.detect_class: (type: String) -> Class?
          {%- endif %}
          {%- endif %}
        end
      end
    end
  end
end
{% endfor -%}
