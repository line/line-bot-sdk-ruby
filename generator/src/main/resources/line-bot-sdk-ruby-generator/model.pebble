{# @pebvariable name="models" type="java.util.ArrayList<org.openapitools.codegen.model.ModelMap>" -#}
{# @pebvariable name="typeMapping" type="java. util. Map<String, String>" -#}
{# @pebvariable name="packageName" type="String" #}
{%- for model in models -%}
{%- include "./license.pebble" -%}
{% if model.model.parent != null %}
require_relative './{{ model.model.parent | underscore }}'
{% endif -%}
{{ "" | raw }}{# To break line #}
module Line
  module Bot
    module V2
      module {{ packageName | camelize }}
        {% if model.model.description != null -%}
        # {{ model.model.description }}
        {% endif -%}
        {% if model.model.externalDocumentation.description != null -%}
        # {{ model.model.externalDocumentation.description }}
        {% endif -%}
        {% if model.model.externalDocumentation.url != null -%}
        # @see {{ model.model.externalDocumentation.url }}
        {% endif -%}
        class {{ model.model.classname }}{% if model.model.parent != null %} < {{ model.model.parent }}{% endif %}
          {%- for property in model.model.vars %}
          {% if model.model.vendorExtensions.get("x-selector").propertyName != property.name %}attr_accessor{% else %}attr_reader{% endif %} :{{ property.name }}{% if property.description != null %} # {{ property.description }}{% endif %}
          {%- endfor %}

          def initialize({% for property in model.model.vars %}{% if model.model.vendorExtensions.get("x-selector").propertyName != property.name %}
            {{ property.name }}:{% if property.defaultValue == null %}{{ property.required ? '' : ' nil'  }}{% else %}{{ ' ' + property.defaultValue }}{% endif %},{% endif %}{% endfor %}
            **dynamic_attributes
          )
            {% if model.model.vendorExtensions.get("x-selector") != null %}@{{model.model.vendorExtensions.get("x-selector").propertyName}} = "{{model.model.vendorExtensions.get("x-selector").mappingName}}"{%- endif -%}
            {%- for property in model.model.vars %}
            {% if property.isArray -%}
            @{{ property.name }} = {{ property.name }}{{ property.required ? '' : '&'  }}.map do |item|
              if item.is_a?(Hash)
                Line::Bot::V2::{{ packageName | camelize }}::{{ property.complexType }}.create(**item)
              else
                item
              end
            end
            {%- elseif property.isModel -%}
            @{{ property.name }} = {{ property.name }}.is_a?(Line::Bot::V2::{{ packageName | camelize }}::{{ property.baseType }}){% if not property.required %} || {{ property.name }}.nil?{% endif %} ? {{ property.name }} : Line::Bot::V2::{{ packageName | camelize }}::{{ property.baseType }}.create(**{{ property.name }})
            {%- elseif model.model.vendorExtensions.get("x-selector").propertyName != property.name -%}
            @{{ property.name }} = {{ property.name }}
            {%- endif -%}
            {%- endfor %}

            dynamic_attributes.each do |key, value|
              self.class.attr_accessor key

              if value.is_a?(Hash)
                struct_klass = Struct.new(*value.keys.map(&:to_sym))
                struct_values = value.map { |_k, v| v.is_a?(Hash) ? Line::Bot::V2::Utils.hash_to_struct(v) : v }
                instance_variable_set("@#{key}", struct_klass.new(*struct_values))
              else
                instance_variable_set("@#{key}", value)
              end
            end
          end

          def self.create(args){% if model.model.vendorExtensions.get("x-children") != null and model.model.vendorExtensions.get("x-discriminator-property") != null %}
            klass = detect_class(args[:{{ model.model.vendorExtensions.get("x-discriminator-property") }}])
            return klass.new(**args) if klass
            {% endif %}
            return new(**args)
          end
          {%- if model.model.vendorExtensions.get("x-children") != null %}

          private

          def self.detect_class(type)
            {
              {%- for child in model.model.vendorExtensions.get("x-children") %}
              {{ child.typeName }}: Line::Bot::V2::{{ packageName | camelize }}::{{ child.className }},
              {%- endfor %}
            }[type.to_sym]
          end{% endif %}
        end
      end
    end
  end
end
{% endfor -%}
