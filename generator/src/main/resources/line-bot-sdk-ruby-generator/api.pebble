{# @pebvariable name="operations" type="org.openapitools.codegen.model.OperationMap" -#}
{# @pebvariable name="authMethods" type="java.util.ArrayList<org.openapitools.codegen.CodegenSecurity>" -#}
{# @pebvariable name="packageName" type="String" #}
{%- include "./license.pebble" %}
require 'json'

require 'line/bot/v2/http_client'
require 'line/bot/v2/reserved_words'
require 'line/bot/v2/utils'

module Line
  module Bot
    module V2
      module {{ packageName | camelize }}
        class Api{{ operations.classname.indexOf('Blob') != -1 ? 'Blob' : '' }}Client
          # Initializes a new {Line::Bot::V2::{{ packageName | camelize }}::Api{{ operations.classname.indexOf('Blob') != -1 ? 'Blob' : '' }}Client} instance.
          #
          # @param base_url [String] The base URL for requests (optional).
          #   Defaults to '{{endpoint(operations.classname)}}' if none is provided.
          #   You can override this for testing or to use a mock server.
            {%- if packageName == 'module_attach' %}
          # @param channel_id [String] The channel ID for Basic authentication.
          # @param channel_secret [String] The channel secret for Basic authentication.
            {%- elseif packageName != 'channel_access_token' %}
          # @param channel_access_token [String] The channel access token for authorization.
            {%- endif %}
          # @param http_options [Hash] HTTP options (same as Net::HTTP options).
          #   See: https://docs.ruby-lang.org/en/3.4/Net/HTTP.html to understand the options.
          #
          # @example
          #   @client ||= Line::Bot::V2::{{ packageName | camelize }}::Api{{ operations.classname.indexOf('Blob') != -1 ? 'Blob' : '' }}Client.new(
            {%- if packageName == 'module_attach' %}
          #     channel_id: "YOUR_CHANNEL_ID",
          #     channel_secret: "YOUR_CHANNEL_SECRET",
            {%- elseif packageName != 'channel_access_token' %}
          #     channel_access_token: "YOUR_CHANNEL_ACCESS_TOKEN",
            {%- endif %}
          #     http_options: {
          #       open_timeout: 5,
          #       read_timeout: 5,
          #     }
          #   )
          def initialize(base_url: nil{% if packageName == 'channel_access_token' %}{% elseif packageName == 'module_attach' %}, channel_id:, channel_secret:{% else %}, channel_access_token:{% endif %}, http_options: {})
            @http_client = HttpClient.new(
              base_url: base_url || '{{endpoint(operations.classname)}}'{% if packageName == 'channel_access_token' %}{% elseif packageName == 'module_attach' %},
              http_headers: {
                Authorization: 'Basic ' + Base64.encode64("#{channel_id}:#{channel_secret}")
              }{% else %},
              http_headers: {
                Authorization: "Bearer #{channel_access_token}"
              }{% endif %},
              http_options: http_options
            )
          end
          {%- for op in operations.operation %}

          # {{ op.notes }}
          # This requests to <code>{{ op.httpMethod }} {{ endpoint(operations.classname) }}{{ op.path }}</code>
          # This returns an array containing response, HTTP status code, and header in order. Please specify all header keys in lowercase.
          #
          {% for param in op.allParams -%}
          # @param {{param.paramName}} [{{ param.dataType }}{{ param.required ? '' : ', nil' }}] {{param.description}}
          {% endfor -%}
          {% if op.isDeprecated -%}
          # @deprecated
          {% endif -%}
          {% if op.externalDocs.description != null -%}
          # {{op.externalDocs.description}}
          {% endif -%}
          {% if op.externalDocs.url != null -%}
          # @see {{op.externalDocs.url}}
          {%- endif %}
          {%- for response in op.responses %}
          {%- if response.content['application/json'].schema.complexType != null %}
          # @return [Array(Line::Bot::V2::{{ packageName | camelize }}::{{ response.content['application/json'].schema.complexType }}, Integer, Hash{String => String})] when HTTP status code is {{ response.code }}
          {%- else %}
          # @return [Array((String|nil), Integer, Hash{String => String})] when HTTP status code is {{ response.code }}
          {%- endif %}
          {%- endfor %}
          # @return [Array((String|nil), Integer, Hash{String => String})] when other HTTP status code is returned. String is HTTP response body itself.
          {#- Remove this steep:ignore after https://github.com/soutaro/steep/issues/1603 is resolved #}
          def {{op.nickname}}_with_http_info( # steep:ignore MethodBodyTypeMismatch
            {%- for param in op.allParams %} 
            {{param.paramName}}:{{ param.required ? '' : ' nil' }}{{ loop.last ? '' : ',' -}}
            {%- endfor %}
          )
            path = "{{ op.path }}"{%  for param in op.pathParams %}
              .gsub(/{{ "{" + param.baseName + "}" }}/, {{ param.paramName }}.to_s)
              {%- endfor %}{% if op.hasFormParams %}

            form_params = {{ '{' }}{% for param in op.formParams %}
              "{{ param.baseName }}": {{ param.paramName }}{{ loop.last ? '' : ',' -}}
              {% endfor %}
            }.compact{% elseif op.hasQueryParams %}
            query_params = {{ '{' }}{% for param in op.queryParams %}
              "{{ param.baseName }}": {{ param.paramName }}{{ loop.last ? '' : ',' -}}
              {% endfor %}
            }.compact{% endif %}{% if op.hasHeaderParams %}
            header_params = {{ '{' }}{% for param in op.headerParams %}
              "{{ param.baseName}}": {{ param.paramName }}{{ loop.last ? '' : ',' -}}
              {% endfor %}
            }.compact{% endif %}

            response = @http_client.{{ op.httpMethod | lower }}{% if op.hasFormParams %}_form{% endif %}{% if op.isMultipart %}_multipart{% endif %}(
              path: path,{% if op.hasBodyParam %}
              body_params: {{ op.bodyParam.paramName }},{% elseif op.hasFormParams %}
              form_params: form_params,{% elseif op.hasQueryParams %}
              query_params: query_params,{% endif %}{% if op.hasHeaderParams %}
              headers: header_params{% endif %}
            )

            case response.code.to_i
            {%- for response in op.responses %}
            when {{ response.code }}
              {%- if response.content['application/json'].schema.complexType != null %}
              json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
              json.transform_keys! do |key|
                Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
              end
              response_body = Line::Bot::V2::{{ packageName | camelize }}::{{ response.content['application/json'].schema.complexType }}.create(json) # steep:ignore InsufficientKeywordArguments
              [response_body, {{ response.code }}, response.each_header.to_h]
              {%- else %}
              [response.body, {{ response.code }}, response.each_header.to_h]
              {%- endif %}
            {%- endfor %}
            else
              [response.body, response.code.to_i, response.each_header.to_h]
            end
          end

          # {{ op.notes }}
          # This requests to <code>{{ op.httpMethod }} {{ endpoint(operations.classname) }}{{ op.path }}</code>
          # When you want to get HTTP status code or response headers, use {{ '{#' }}{{op.nickname}}_with_http_info} instead of this.
          #
          {% for param in op.allParams -%}
          # @param {{param.paramName}} [{{ param.dataType }}{{ param.required ? '' : ', nil' }}] {{param.description}}
          {% endfor -%}
          {% if op.isDeprecated -%}
          # @deprecated
          {% endif -%}
          {% if op.externalDocs.description != null -%}
          # {{op.externalDocs.description}}
          {% endif -%}
          {% if op.externalDocs.url != null -%}
          # @see {{op.externalDocs.url}}
          {%- endif %}
          {%- for response in op.responses %}
          {%- if response.content['application/json'].schema.complexType != null %}
          # @return [Line::Bot::V2::{{ packageName | camelize }}::{{ response.content['application/json'].schema.complexType }}] when HTTP status code is {{ response.code }}
          {%- else %}
          # @return [String, nil] when HTTP status code is {{ response.code }}
          {%- endif %}
          {%- endfor %}
          # @return [String, nil] when other HTTP status code is returned. This String is HTTP response body itself.
          def {{op.nickname}}({% for param in op.allParams %}
            {{param.paramName}}:{{ param.required ? '' : ' nil' }}{{ loop.last ? '' : ',' -}}
            {% endfor %}
          )
            response_body, _status_code, _headers = {{op.nickname}}_with_http_info({% for param in op.allParams %}
              {{param.paramName}}: {{param.paramName}}{{ loop.last ? '' : ',' -}}
            {% endfor %}
            )

            response_body
          end{% endfor %}
        end
      end
    end
  end
end
