# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module Module
        class ApiClient
          def initialize: (
            base_url: String?,
            channel_access_token: String,
            http_options: Hash[String|Symbol, untyped]
          ) -> void

          # If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
          #
          # @param chat_id The `userId`, `roomId`, or `groupId`
          # @param acquire_chat_control_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#acquire-control-api
          def acquire_chat_control_with_http_info: (
            chat_id: String, 
            acquire_chat_control_request: AcquireChatControlRequest?
          ) -> [(String?), Integer, Hash[String, String]]

          # If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
          #
          # @param chat_id The `userId`, `roomId`, or `groupId`
          # @param acquire_chat_control_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#acquire-control-api
          def acquire_chat_control: (
            chat_id: String, 
            acquire_chat_control_request: AcquireChatControlRequest?
          ) -> (String?)

          # The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
          #
          # @param detach_module_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#unlink-detach-module-channel-by-operation-mc-admin
          def detach_module_with_http_info: (
            detach_module_request: DetachModuleRequest?
          ) -> [(String?), Integer, Hash[String, String]]

          # The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
          #
          # @param detach_module_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#unlink-detach-module-channel-by-operation-mc-admin
          def detach_module: (
            detach_module_request: DetachModuleRequest?
          ) -> (String?)

          # Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
          #
          # @param start Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all basic information about the bots in one request, include this parameter to get the remaining array. 
          # @param limit Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100 
          # @see https://developers.line.biz/en/reference/partner-docs/#get-multiple-bot-info-api
          def get_modules_with_http_info: (
            start: String?, 
            limit: Integer?
          ) -> [(GetModulesResponse), Integer, Hash[String, String]]

          # Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
          #
          # @param start Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all basic information about the bots in one request, include this parameter to get the remaining array. 
          # @param limit Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100 
          # @see https://developers.line.biz/en/reference/partner-docs/#get-multiple-bot-info-api
          def get_modules: (
            start: String?, 
            limit: Integer?
          ) -> (GetModulesResponse)

          # To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
          #
          # @param chat_id The `userId`, `roomId`, or `groupId`
          # @see https://developers.line.biz/en/reference/partner-docs/#release-control-api
          def release_chat_control_with_http_info: (
            chat_id: String
          ) -> [(String?), Integer, Hash[String, String]]

          # To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
          #
          # @param chat_id The `userId`, `roomId`, or `groupId`
          # @see https://developers.line.biz/en/reference/partner-docs/#release-control-api
          def release_chat_control: (
            chat_id: String
          ) -> (String?)
        end
      end
    end
  end
end
