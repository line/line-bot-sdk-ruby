# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module MessagingApi
        class ApiClient
          def initialize: (
            base_url: String?,
            channel_access_token: String,
            http_options: Hash[String|Symbol, untyped]
          ) -> void

          # Send a message using phone number
          #
          # @param audience_match_messages_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#phone-audience-match
          def audience_match_with_http_info: (
            audience_match_messages_request: AudienceMatchMessagesRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Send a message using phone number
          #
          # @param audience_match_messages_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#phone-audience-match
          def audience_match: (
            audience_match_messages_request: AudienceMatchMessagesRequest
          ) -> (String?)

          # Sends a message to multiple users at any time.
          #
          # @param broadcast_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-broadcast-message
          def broadcast_with_http_info: (
            broadcast_request: BroadcastRequest, 
            x_line_retry_key: String?
          ) -> [(String?|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse), Integer, Hash[String, String]]

          # Sends a message to multiple users at any time.
          #
          # @param broadcast_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-broadcast-message
          def broadcast: (
            broadcast_request: BroadcastRequest, 
            x_line_retry_key: String?
          ) -> (String?|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse)

          # Cancel default rich menu
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#cancel-default-rich-menu
          def cancel_default_rich_menu_with_http_info: (
          ) -> [(String?), Integer, Hash[String, String]]

          # Cancel default rich menu
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#cancel-default-rich-menu
          def cancel_default_rich_menu: (
          ) -> (String?)

          # Create rich menu
          #
          # @param rich_menu_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu
          def create_rich_menu_with_http_info: (
            rich_menu_request: RichMenuRequest
          ) -> [(RichMenuIdResponse), Integer, Hash[String, String]]

          # Create rich menu
          #
          # @param rich_menu_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu
          def create_rich_menu: (
            rich_menu_request: RichMenuRequest
          ) -> (RichMenuIdResponse)

          # Create rich menu alias
          #
          # @param create_rich_menu_alias_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu-alias
          def create_rich_menu_alias_with_http_info: (
            create_rich_menu_alias_request: CreateRichMenuAliasRequest
          ) -> [(String?|ErrorResponse), Integer, Hash[String, String]]

          # Create rich menu alias
          #
          # @param create_rich_menu_alias_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-rich-menu-alias
          def create_rich_menu_alias: (
            create_rich_menu_alias_request: CreateRichMenuAliasRequest
          ) -> (String?|ErrorResponse)

          # Deletes a rich menu.
          #
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu
          def delete_rich_menu_with_http_info: (
            rich_menu_id: String
          ) -> [(String?), Integer, Hash[String, String]]

          # Deletes a rich menu.
          #
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu
          def delete_rich_menu: (
            rich_menu_id: String
          ) -> (String?)

          # Delete rich menu alias
          #
          # @param rich_menu_alias_id Rich menu alias ID that you want to delete.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu-alias
          def delete_rich_menu_alias_with_http_info: (
            rich_menu_alias_id: String
          ) -> [(String?|ErrorResponse), Integer, Hash[String, String]]

          # Delete rich menu alias
          #
          # @param rich_menu_alias_id Rich menu alias ID that you want to delete.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu-alias
          def delete_rich_menu_alias: (
            rich_menu_alias_id: String
          ) -> (String?|ErrorResponse)

          # Get result of message delivery using phone number
          #
          # @param date Date the message was sent  Format: `yyyyMMdd` (e.g. `20190831`) Time Zone: UTC+9 
          # @see https://developers.line.biz/en/reference/partner-docs/#get-phone-audience-match
          def get_ad_phone_message_statistics_with_http_info: (
            date: String
          ) -> [(NumberOfMessagesResponse), Integer, Hash[String, String]]

          # Get result of message delivery using phone number
          #
          # @param date Date the message was sent  Format: `yyyyMMdd` (e.g. `20190831`) Time Zone: UTC+9 
          # @see https://developers.line.biz/en/reference/partner-docs/#get-phone-audience-match
          def get_ad_phone_message_statistics: (
            date: String
          ) -> (NumberOfMessagesResponse)

          # Get name list of units used this month
          #
          # @param limit The maximum number of aggregation units you can get per request. 
          # @param start Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all the aggregation units in one request, include this parameter to get the remaining array. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-name-list-of-units-used-this-month
          def get_aggregation_unit_name_list_with_http_info: (
            limit: String?, 
            start: String?
          ) -> [(GetAggregationUnitNameListResponse), Integer, Hash[String, String]]

          # Get name list of units used this month
          #
          # @param limit The maximum number of aggregation units you can get per request. 
          # @param start Value of the continuation token found in the next property of the JSON object returned in the response. If you can't get all the aggregation units in one request, include this parameter to get the remaining array. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-name-list-of-units-used-this-month
          def get_aggregation_unit_name_list: (
            limit: String?, 
            start: String?
          ) -> (GetAggregationUnitNameListResponse)

          # Get number of units used this month
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-units-used-this-month
          def get_aggregation_unit_usage_with_http_info: (
          ) -> [(GetAggregationUnitUsageResponse), Integer, Hash[String, String]]

          # Get number of units used this month
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-units-used-this-month
          def get_aggregation_unit_usage: (
          ) -> (GetAggregationUnitUsageResponse)

          # Get bot info
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-bot-info
          def get_bot_info_with_http_info: (
          ) -> [(BotInfoResponse), Integer, Hash[String, String]]

          # Get bot info
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-bot-info
          def get_bot_info: (
          ) -> (BotInfoResponse)

          # Gets the ID of the default rich menu set with the Messaging API.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-default-rich-menu-id
          def get_default_rich_menu_id_with_http_info: (
          ) -> [(RichMenuIdResponse), Integer, Hash[String, String]]

          # Gets the ID of the default rich menu set with the Messaging API.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-default-rich-menu-id
          def get_default_rich_menu_id: (
          ) -> (RichMenuIdResponse)

          # Get a list of users who added your LINE Official Account as a friend
          #
          # @param start Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs. 
          # @param limit The maximum number of user IDs to retrieve in a single request.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-follower-ids
          def get_followers_with_http_info: (
            start: String?, 
            limit: Integer?
          ) -> [(GetFollowersResponse), Integer, Hash[String, String]]

          # Get a list of users who added your LINE Official Account as a friend
          #
          # @param start Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs. 
          # @param limit The maximum number of user IDs to retrieve in a single request.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-follower-ids
          def get_followers: (
            start: String?, 
            limit: Integer?
          ) -> (GetFollowersResponse)

          # Get number of users in a group chat
          #
          # @param group_id Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-group-count
          def get_group_member_count_with_http_info: (
            group_id: String
          ) -> [(GroupMemberCountResponse), Integer, Hash[String, String]]

          # Get number of users in a group chat
          #
          # @param group_id Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-group-count
          def get_group_member_count: (
            group_id: String
          ) -> (GroupMemberCountResponse)

          # Get group chat member profile
          #
          # @param group_id Group ID
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-profile
          def get_group_member_profile_with_http_info: (
            group_id: String, 
            user_id: String
          ) -> [(GroupUserProfileResponse), Integer, Hash[String, String]]

          # Get group chat member profile
          #
          # @param group_id Group ID
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-profile
          def get_group_member_profile: (
            group_id: String, 
            user_id: String
          ) -> (GroupUserProfileResponse)

          # Get group chat member user IDs
          #
          # @param group_id Group ID
          # @param start Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-user-ids
          def get_group_members_ids_with_http_info: (
            group_id: String, 
            start: String?
          ) -> [(MembersIdsResponse), Integer, Hash[String, String]]

          # Get group chat member user IDs
          #
          # @param group_id Group ID
          # @param start Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-member-user-ids
          def get_group_members_ids: (
            group_id: String, 
            start: String?
          ) -> (MembersIdsResponse)

          # Get group chat summary
          #
          # @param group_id Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-summary
          def get_group_summary_with_http_info: (
            group_id: String
          ) -> [(GroupSummaryResponse), Integer, Hash[String, String]]

          # Get group chat summary
          #
          # @param group_id Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-group-summary
          def get_group_summary: (
            group_id: String
          ) -> (GroupSummaryResponse)

          # Get a list of memberships.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-membership-plans
          def get_membership_list_with_http_info: (
          ) -> [(MembershipListResponse|ErrorResponse), Integer, Hash[String, String]]

          # Get a list of memberships.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-membership-plans
          def get_membership_list: (
          ) -> (MembershipListResponse|ErrorResponse)

          # Get a user's membership subscription.
          #
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-a-users-membership-subscription-status
          def get_membership_subscription_with_http_info: (
            user_id: String
          ) -> [(GetMembershipSubscriptionResponse|ErrorResponse|ErrorResponse), Integer, Hash[String, String]]

          # Get a user's membership subscription.
          #
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-a-users-membership-subscription-status
          def get_membership_subscription: (
            user_id: String
          ) -> (GetMembershipSubscriptionResponse|ErrorResponse|ErrorResponse)

          # Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-quota
          def get_message_quota_with_http_info: (
          ) -> [(MessageQuotaResponse), Integer, Hash[String, String]]

          # Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-quota
          def get_message_quota: (
          ) -> (MessageQuotaResponse)

          # Gets the number of messages sent in the current month.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-consumption
          def get_message_quota_consumption_with_http_info: (
          ) -> [(QuotaConsumptionResponse), Integer, Hash[String, String]]

          # Gets the number of messages sent in the current month.
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-consumption
          def get_message_quota_consumption: (
          ) -> (QuotaConsumptionResponse)

          # Gets the status of a narrowcast message.
          #
          # @param request_id The narrowcast message's request ID. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-narrowcast-progress-status
          def get_narrowcast_progress_with_http_info: (
            request_id: String
          ) -> [(NarrowcastProgressResponse), Integer, Hash[String, String]]

          # Gets the status of a narrowcast message.
          #
          # @param request_id The narrowcast message's request ID. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-narrowcast-progress-status
          def get_narrowcast_progress: (
            request_id: String
          ) -> (NarrowcastProgressResponse)

          # Get number of sent broadcast messages
          #
          # @param date Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-broadcast-messages
          def get_number_of_sent_broadcast_messages_with_http_info: (
            date: String
          ) -> [(NumberOfMessagesResponse), Integer, Hash[String, String]]

          # Get number of sent broadcast messages
          #
          # @param date Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-broadcast-messages
          def get_number_of_sent_broadcast_messages: (
            date: String
          ) -> (NumberOfMessagesResponse)

          # Get number of sent multicast messages
          #
          # @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-multicast-messages
          def get_number_of_sent_multicast_messages_with_http_info: (
            date: String
          ) -> [(NumberOfMessagesResponse), Integer, Hash[String, String]]

          # Get number of sent multicast messages
          #
          # @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-multicast-messages
          def get_number_of_sent_multicast_messages: (
            date: String
          ) -> (NumberOfMessagesResponse)

          # Get number of sent push messages
          #
          # @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-push-messages
          def get_number_of_sent_push_messages_with_http_info: (
            date: String
          ) -> [(NumberOfMessagesResponse), Integer, Hash[String, String]]

          # Get number of sent push messages
          #
          # @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-push-messages
          def get_number_of_sent_push_messages: (
            date: String
          ) -> (NumberOfMessagesResponse)

          # Get number of sent reply messages
          #
          # @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-reply-messages
          def get_number_of_sent_reply_messages_with_http_info: (
            date: String
          ) -> [(NumberOfMessagesResponse), Integer, Hash[String, String]]

          # Get number of sent reply messages
          #
          # @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-number-of-reply-messages
          def get_number_of_sent_reply_messages: (
            date: String
          ) -> (NumberOfMessagesResponse)

          # Get number of sent LINE notification messages　
          #
          # @param date Date the message was sent  Format: `yyyyMMdd` (Example:`20211231`) Time zone: UTC+9 
          # @see https://developers.line.biz/en/reference/partner-docs/#get-number-of-sent-line-notification-messages
          def get_pnp_message_statistics_with_http_info: (
            date: String
          ) -> [(NumberOfMessagesResponse), Integer, Hash[String, String]]

          # Get number of sent LINE notification messages　
          #
          # @param date Date the message was sent  Format: `yyyyMMdd` (Example:`20211231`) Time zone: UTC+9 
          # @see https://developers.line.biz/en/reference/partner-docs/#get-number-of-sent-line-notification-messages
          def get_pnp_message_statistics: (
            date: String
          ) -> (NumberOfMessagesResponse)

          # Get profile
          #
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-profile
          def get_profile_with_http_info: (
            user_id: String
          ) -> [(UserProfileResponse), Integer, Hash[String, String]]

          # Get profile
          #
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-profile
          def get_profile: (
            user_id: String
          ) -> (UserProfileResponse)

          # Gets a rich menu via a rich menu ID.
          #
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu
          def get_rich_menu_with_http_info: (
            rich_menu_id: String
          ) -> [(RichMenuResponse), Integer, Hash[String, String]]

          # Gets a rich menu via a rich menu ID.
          #
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu
          def get_rich_menu: (
            rich_menu_id: String
          ) -> (RichMenuResponse)

          # Get rich menu alias information
          #
          # @param rich_menu_alias_id The rich menu alias ID whose information you want to obtain.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-by-id
          def get_rich_menu_alias_with_http_info: (
            rich_menu_alias_id: String
          ) -> [(RichMenuAliasResponse), Integer, Hash[String, String]]

          # Get rich menu alias information
          #
          # @param rich_menu_alias_id The rich menu alias ID whose information you want to obtain.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-by-id
          def get_rich_menu_alias: (
            rich_menu_alias_id: String
          ) -> (RichMenuAliasResponse)

          # Get list of rich menu alias
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-list
          def get_rich_menu_alias_list_with_http_info: (
          ) -> [(RichMenuAliasListResponse), Integer, Hash[String, String]]

          # Get list of rich menu alias
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-list
          def get_rich_menu_alias_list: (
          ) -> (RichMenuAliasListResponse)

          # Get the status of Replace or unlink a linked rich menus in batches.
          #
          # @param request_id A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-batch-control-rich-menus-progress-status
          def get_rich_menu_batch_progress_with_http_info: (
            request_id: String
          ) -> [(RichMenuBatchProgressResponse), Integer, Hash[String, String]]

          # Get the status of Replace or unlink a linked rich menus in batches.
          #
          # @param request_id A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-batch-control-rich-menus-progress-status
          def get_rich_menu_batch_progress: (
            request_id: String
          ) -> (RichMenuBatchProgressResponse)

          # Get rich menu ID of user
          #
          # @param user_id User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-id-of-user
          def get_rich_menu_id_of_user_with_http_info: (
            user_id: String
          ) -> [(RichMenuIdResponse), Integer, Hash[String, String]]

          # Get rich menu ID of user
          #
          # @param user_id User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-id-of-user
          def get_rich_menu_id_of_user: (
            user_id: String
          ) -> (RichMenuIdResponse)

          # Get rich menu list
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-list
          def get_rich_menu_list_with_http_info: (
          ) -> [(RichMenuListResponse), Integer, Hash[String, String]]

          # Get rich menu list
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-list
          def get_rich_menu_list: (
          ) -> (RichMenuListResponse)

          # Get number of users in a multi-person chat
          #
          # @param room_id Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-room-count
          def get_room_member_count_with_http_info: (
            room_id: String
          ) -> [(RoomMemberCountResponse), Integer, Hash[String, String]]

          # Get number of users in a multi-person chat
          #
          # @param room_id Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-members-room-count
          def get_room_member_count: (
            room_id: String
          ) -> (RoomMemberCountResponse)

          # Get multi-person chat member profile
          #
          # @param room_id Room ID
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-profile
          def get_room_member_profile_with_http_info: (
            room_id: String, 
            user_id: String
          ) -> [(RoomUserProfileResponse), Integer, Hash[String, String]]

          # Get multi-person chat member profile
          #
          # @param room_id Room ID
          # @param user_id User ID
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-profile
          def get_room_member_profile: (
            room_id: String, 
            user_id: String
          ) -> (RoomUserProfileResponse)

          # Get multi-person chat member user IDs
          #
          # @param room_id Room ID
          # @param start Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-user-ids
          def get_room_members_ids_with_http_info: (
            room_id: String, 
            start: String?
          ) -> [(MembersIdsResponse), Integer, Hash[String, String]]

          # Get multi-person chat member user IDs
          #
          # @param room_id Room ID
          # @param start Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-room-member-user-ids
          def get_room_members_ids: (
            room_id: String, 
            start: String?
          ) -> (MembersIdsResponse)

          # Get webhook endpoint information
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-webhook-endpoint-information
          def get_webhook_endpoint_with_http_info: (
          ) -> [(GetWebhookEndpointResponse), Integer, Hash[String, String]]

          # Get webhook endpoint information
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-webhook-endpoint-information
          def get_webhook_endpoint: (
          ) -> (GetWebhookEndpointResponse)

          # Issue link token
          #
          # @param user_id User ID for the LINE account to be linked. Found in the `source` object of account link event objects. Do not use the LINE ID used in LINE. 
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-link-token
          def issue_link_token_with_http_info: (
            user_id: String
          ) -> [(IssueLinkTokenResponse), Integer, Hash[String, String]]

          # Issue link token
          #
          # @param user_id User ID for the LINE account to be linked. Found in the `source` object of account link event objects. Do not use the LINE ID used in LINE. 
          # @see https://developers.line.biz/en/reference/messaging-api/#issue-link-token
          def issue_link_token: (
            user_id: String
          ) -> (IssueLinkTokenResponse)

          # Leave group chat
          #
          # @param group_id Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-group
          def leave_group_with_http_info: (
            group_id: String
          ) -> [(String?|ErrorResponse|ErrorResponse), Integer, Hash[String, String]]

          # Leave group chat
          #
          # @param group_id Group ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-group
          def leave_group: (
            group_id: String
          ) -> (String?|ErrorResponse|ErrorResponse)

          # Leave multi-person chat
          #
          # @param room_id Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-room
          def leave_room_with_http_info: (
            room_id: String
          ) -> [(String?), Integer, Hash[String, String]]

          # Leave multi-person chat
          #
          # @param room_id Room ID
          # @see https://developers.line.biz/en/reference/messaging-api/#leave-room
          def leave_room: (
            room_id: String
          ) -> (String?)

          # Link rich menu to user.
          #
          # @param user_id User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-user
          def link_rich_menu_id_to_user_with_http_info: (
            user_id: String, 
            rich_menu_id: String
          ) -> [(String?), Integer, Hash[String, String]]

          # Link rich menu to user.
          #
          # @param user_id User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-user
          def link_rich_menu_id_to_user: (
            user_id: String, 
            rich_menu_id: String
          ) -> (String?)

          # Link rich menu to multiple users
          #
          # @param rich_menu_bulk_link_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-users
          def link_rich_menu_id_to_users_with_http_info: (
            rich_menu_bulk_link_request: RichMenuBulkLinkRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Link rich menu to multiple users
          #
          # @param rich_menu_bulk_link_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-users
          def link_rich_menu_id_to_users: (
            rich_menu_bulk_link_request: RichMenuBulkLinkRequest
          ) -> (String?)

          # Mark messages from users as read
          #
          # @param mark_messages_as_read_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#mark-messages-from-users-as-read
          def mark_messages_as_read_with_http_info: (
            mark_messages_as_read_request: MarkMessagesAsReadRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Mark messages from users as read
          #
          # @param mark_messages_as_read_request 
          # @see https://developers.line.biz/en/reference/partner-docs/#mark-messages-from-users-as-read
          def mark_messages_as_read: (
            mark_messages_as_read_request: MarkMessagesAsReadRequest
          ) -> (String?)

          # An API that efficiently sends the same message to multiple user IDs. You can't send messages to group chats or multi-person chats.
          #
          # @param multicast_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-multicast-message
          def multicast_with_http_info: (
            multicast_request: MulticastRequest, 
            x_line_retry_key: String?
          ) -> [(String?|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse), Integer, Hash[String, String]]

          # An API that efficiently sends the same message to multiple user IDs. You can't send messages to group chats or multi-person chats.
          #
          # @param multicast_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-multicast-message
          def multicast: (
            multicast_request: MulticastRequest, 
            x_line_retry_key: String?
          ) -> (String?|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse)

          # Send narrowcast message
          #
          # @param narrowcast_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message
          def narrowcast_with_http_info: (
            narrowcast_request: NarrowcastRequest, 
            x_line_retry_key: String?
          ) -> [(String?|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse), Integer, Hash[String, String]]

          # Send narrowcast message
          #
          # @param narrowcast_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message
          def narrowcast: (
            narrowcast_request: NarrowcastRequest, 
            x_line_retry_key: String?
          ) -> (String?|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse)

          # Sends a message to a user, group chat, or multi-person chat at any time.
          #
          # @param push_message_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-push-message
          def push_message_with_http_info: (
            push_message_request: PushMessageRequest, 
            x_line_retry_key: String?
          ) -> [(PushMessageResponse|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse), Integer, Hash[String, String]]

          # Sends a message to a user, group chat, or multi-person chat at any time.
          #
          # @param push_message_request 
          # @param x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn't generated by LINE. Each developer must generate their own retry key. 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-push-message
          def push_message: (
            push_message_request: PushMessageRequest, 
            x_line_retry_key: String?
          ) -> (PushMessageResponse|ErrorResponse|ErrorResponse|ErrorResponse|ErrorResponse)

          # Send LINE notification message
          #
          # @param pnp_messages_request 
          # @param x_line_delivery_tag String returned in the delivery.data property of the delivery completion event via Webhook.
          # @see https://developers.line.biz/en/reference/partner-docs/#send-line-notification-message
          def push_messages_by_phone_with_http_info: (
            pnp_messages_request: PnpMessagesRequest, 
            x_line_delivery_tag: String?
          ) -> [(String?|ErrorResponse), Integer, Hash[String, String]]

          # Send LINE notification message
          #
          # @param pnp_messages_request 
          # @param x_line_delivery_tag String returned in the delivery.data property of the delivery completion event via Webhook.
          # @see https://developers.line.biz/en/reference/partner-docs/#send-line-notification-message
          def push_messages_by_phone: (
            pnp_messages_request: PnpMessagesRequest, 
            x_line_delivery_tag: String?
          ) -> (String?|ErrorResponse)

          # Send reply message
          #
          # @param reply_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-reply-message
          def reply_message_with_http_info: (
            reply_message_request: ReplyMessageRequest
          ) -> [(ReplyMessageResponse|ErrorResponse|ErrorResponse), Integer, Hash[String, String]]

          # Send reply message
          #
          # @param reply_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#send-reply-message
          def reply_message: (
            reply_message_request: ReplyMessageRequest
          ) -> (ReplyMessageResponse|ErrorResponse|ErrorResponse)

          # You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
          #
          # @param rich_menu_batch_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#batch-control-rich-menus-of-users
          def rich_menu_batch_with_http_info: (
            rich_menu_batch_request: RichMenuBatchRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
          #
          # @param rich_menu_batch_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#batch-control-rich-menus-of-users
          def rich_menu_batch: (
            rich_menu_batch_request: RichMenuBatchRequest
          ) -> (String?)

          # Set default rich menu
          #
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#set-default-rich-menu
          def set_default_rich_menu_with_http_info: (
            rich_menu_id: String
          ) -> [(String?), Integer, Hash[String, String]]

          # Set default rich menu
          #
          # @param rich_menu_id ID of a rich menu
          # @see https://developers.line.biz/en/reference/messaging-api/#set-default-rich-menu
          def set_default_rich_menu: (
            rich_menu_id: String
          ) -> (String?)

          # Set webhook endpoint URL
          #
          # @param set_webhook_endpoint_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#set-webhook-endpoint-url
          def set_webhook_endpoint_with_http_info: (
            set_webhook_endpoint_request: SetWebhookEndpointRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Set webhook endpoint URL
          #
          # @param set_webhook_endpoint_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#set-webhook-endpoint-url
          def set_webhook_endpoint: (
            set_webhook_endpoint_request: SetWebhookEndpointRequest
          ) -> (String?)

          # Display a loading animation in one-on-one chats between users and LINE Official Accounts.
          #
          # @param show_loading_animation_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator
          def show_loading_animation_with_http_info: (
            show_loading_animation_request: ShowLoadingAnimationRequest
          ) -> [(String?|ErrorResponse), Integer, Hash[String, String]]

          # Display a loading animation in one-on-one chats between users and LINE Official Accounts.
          #
          # @param show_loading_animation_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator
          def show_loading_animation: (
            show_loading_animation_request: ShowLoadingAnimationRequest
          ) -> (String?|ErrorResponse)

          # Test webhook endpoint
          #
          # @param test_webhook_endpoint_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#test-webhook-endpoint
          def test_webhook_endpoint_with_http_info: (
            test_webhook_endpoint_request: TestWebhookEndpointRequest?
          ) -> [(TestWebhookEndpointResponse), Integer, Hash[String, String]]

          # Test webhook endpoint
          #
          # @param test_webhook_endpoint_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#test-webhook-endpoint
          def test_webhook_endpoint: (
            test_webhook_endpoint_request: TestWebhookEndpointRequest?
          ) -> (TestWebhookEndpointResponse)

          # Unlink rich menu from user
          #
          # @param user_id User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-user
          def unlink_rich_menu_id_from_user_with_http_info: (
            user_id: String
          ) -> [(String?), Integer, Hash[String, String]]

          # Unlink rich menu from user
          #
          # @param user_id User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-user
          def unlink_rich_menu_id_from_user: (
            user_id: String
          ) -> (String?)

          # Unlink rich menus from multiple users
          #
          # @param rich_menu_bulk_unlink_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-users
          def unlink_rich_menu_id_from_users_with_http_info: (
            rich_menu_bulk_unlink_request: RichMenuBulkUnlinkRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Unlink rich menus from multiple users
          #
          # @param rich_menu_bulk_unlink_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-users
          def unlink_rich_menu_id_from_users: (
            rich_menu_bulk_unlink_request: RichMenuBulkUnlinkRequest
          ) -> (String?)

          # Update rich menu alias
          #
          # @param rich_menu_alias_id The rich menu alias ID you want to update.
          # @param update_rich_menu_alias_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#update-rich-menu-alias
          def update_rich_menu_alias_with_http_info: (
            rich_menu_alias_id: String, 
            update_rich_menu_alias_request: UpdateRichMenuAliasRequest
          ) -> [(String?|ErrorResponse), Integer, Hash[String, String]]

          # Update rich menu alias
          #
          # @param rich_menu_alias_id The rich menu alias ID you want to update.
          # @param update_rich_menu_alias_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#update-rich-menu-alias
          def update_rich_menu_alias: (
            rich_menu_alias_id: String, 
            update_rich_menu_alias_request: UpdateRichMenuAliasRequest
          ) -> (String?|ErrorResponse)

          # Validate message objects of a broadcast message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-broadcast-message
          def validate_broadcast_with_http_info: (
            validate_message_request: ValidateMessageRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Validate message objects of a broadcast message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-broadcast-message
          def validate_broadcast: (
            validate_message_request: ValidateMessageRequest
          ) -> (String?)

          # Validate message objects of a multicast message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-multicast-message
          def validate_multicast_with_http_info: (
            validate_message_request: ValidateMessageRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Validate message objects of a multicast message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-multicast-message
          def validate_multicast: (
            validate_message_request: ValidateMessageRequest
          ) -> (String?)

          # Validate message objects of a narrowcast message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-narrowcast-message
          def validate_narrowcast_with_http_info: (
            validate_message_request: ValidateMessageRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Validate message objects of a narrowcast message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-narrowcast-message
          def validate_narrowcast: (
            validate_message_request: ValidateMessageRequest
          ) -> (String?)

          # Validate message objects of a push message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-push-message
          def validate_push_with_http_info: (
            validate_message_request: ValidateMessageRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Validate message objects of a push message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-push-message
          def validate_push: (
            validate_message_request: ValidateMessageRequest
          ) -> (String?)

          # Validate message objects of a reply message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-reply-message
          def validate_reply_with_http_info: (
            validate_message_request: ValidateMessageRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Validate message objects of a reply message
          #
          # @param validate_message_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-reply-message
          def validate_reply: (
            validate_message_request: ValidateMessageRequest
          ) -> (String?)

          # Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
          #
          # @param rich_menu_batch_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-batch-control-rich-menus-request
          def validate_rich_menu_batch_request_with_http_info: (
            rich_menu_batch_request: RichMenuBatchRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
          #
          # @param rich_menu_batch_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-batch-control-rich-menus-request
          def validate_rich_menu_batch_request: (
            rich_menu_batch_request: RichMenuBatchRequest
          ) -> (String?)

          # Validate rich menu object
          #
          # @param rich_menu_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-rich-menu-object
          def validate_rich_menu_object_with_http_info: (
            rich_menu_request: RichMenuRequest
          ) -> [(String?), Integer, Hash[String, String]]

          # Validate rich menu object
          #
          # @param rich_menu_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#validate-rich-menu-object
          def validate_rich_menu_object: (
            rich_menu_request: RichMenuRequest
          ) -> (String?)
        end
      end
    end
  end
end
