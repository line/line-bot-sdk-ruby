# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module MessagingApi
        class FlexBox < FlexComponent
          attr_reader type: String
          attr_accessor layout: 'horizontal'|'vertical'|'baseline'
          attr_accessor flex: Integer?
          attr_accessor contents: Array[FlexComponent]
          attr_accessor spacing: String?
          attr_accessor margin: String?
          attr_accessor position: 'relative'|'absolute'?
          attr_accessor offset_top: String?
          attr_accessor offset_bottom: String?
          attr_accessor offset_start: String?
          attr_accessor offset_end: String?
          attr_accessor background_color: String?
          attr_accessor border_color: String?
          attr_accessor border_width: String?
          attr_accessor corner_radius: String?
          attr_accessor width: String?
          attr_accessor max_width: String?
          attr_accessor height: String?
          attr_accessor max_height: String?
          attr_accessor padding_all: String?
          attr_accessor padding_top: String?
          attr_accessor padding_bottom: String?
          attr_accessor padding_start: String?
          attr_accessor padding_end: String?
          attr_accessor action: Action?
          attr_accessor justify_content: 'center'|'flex-start'|'flex-end'|'space-between'|'space-around'|'space-evenly'?
          attr_accessor align_items: 'center'|'flex-start'|'flex-end'?
          attr_accessor background: FlexBoxBackground?
          

          # @param layout [String] ('horizontal'|'vertical'|'baseline') 
          # @param flex [Integer,nil] 
          # @param contents [Array[FlexComponent, Hash[Symbol, untyped]]] 
          # @param spacing [String,nil] 
          # @param margin [String,nil] 
          # @param position [String,nil] ('relative'|'absolute') 
          # @param offset_top [String,nil] 
          # @param offset_bottom [String,nil] 
          # @param offset_start [String,nil] 
          # @param offset_end [String,nil] 
          # @param background_color [String,nil] 
          # @param border_color [String,nil] 
          # @param border_width [String,nil] 
          # @param corner_radius [String,nil] 
          # @param width [String,nil] 
          # @param max_width [String,nil] 
          # @param height [String,nil] 
          # @param max_height [String,nil] 
          # @param padding_all [String,nil] 
          # @param padding_top [String,nil] 
          # @param padding_bottom [String,nil] 
          # @param padding_start [String,nil] 
          # @param padding_end [String,nil] 
          # @param action [Action, Hash[Symbol, untyped], nil] 
          # @param justify_content [String,nil] ('center'|'flex-start'|'flex-end'|'space-between'|'space-around'|'space-evenly') 
          # @param align_items [String,nil] ('center'|'flex-start'|'flex-end') 
          # @param background [FlexBoxBackground, Hash[Symbol, untyped], nil] 
          def initialize: (
            layout: 'horizontal'|'vertical'|'baseline',
            ?flex: Integer?,
            contents: Array[FlexComponent| Hash[Symbol, untyped]],
            ?spacing: String?,
            ?margin: String?,
            ?position: 'relative'|'absolute'?,
            ?offset_top: String?,
            ?offset_bottom: String?,
            ?offset_start: String?,
            ?offset_end: String?,
            ?background_color: String?,
            ?border_color: String?,
            ?border_width: String?,
            ?corner_radius: String?,
            ?width: String?,
            ?max_width: String?,
            ?height: String?,
            ?max_height: String?,
            ?padding_all: String?,
            ?padding_top: String?,
            ?padding_bottom: String?,
            ?padding_start: String?,
            ?padding_end: String?,
            ?action: Action?| Hash[Symbol, untyped]?,
            ?justify_content: 'center'|'flex-start'|'flex-end'|'space-between'|'space-around'|'space-evenly'?,
            ?align_items: 'center'|'flex-start'|'flex-end'?,
            ?background: FlexBoxBackground?| Hash[Symbol, untyped]?,
            **untyped dynamic_attributes
          ) -> void

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::MessagingApi::FlexBox] Instance of the class
          def self.create: (Hash[Symbol, untyped]) -> FlexBox

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==: (untyped other) -> bool

          # @return [Integer] Hash code of the object
          def hash: () -> Integer
        end
      end
    end
  end
end
