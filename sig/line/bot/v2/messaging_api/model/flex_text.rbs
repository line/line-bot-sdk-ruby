# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module MessagingApi
        class FlexText < FlexComponent
          attr_reader type: String
          attr_accessor flex: Integer?
          attr_accessor text: String?
          attr_accessor size: String?
          attr_accessor align: 'start'|'end'|'center'?
          attr_accessor gravity: 'top'|'bottom'|'center'?
          attr_accessor color: String?
          attr_accessor weight: 'regular'|'bold'?
          attr_accessor style: 'normal'|'italic'?
          attr_accessor decoration: 'none'|'underline'|'line-through'?
          attr_accessor wrap: bool?
          attr_accessor line_spacing: String?
          attr_accessor margin: String?
          attr_accessor position: 'relative'|'absolute'?
          attr_accessor offset_top: String?
          attr_accessor offset_bottom: String?
          attr_accessor offset_start: String?
          attr_accessor offset_end: String?
          attr_accessor action: Action?
          attr_accessor max_lines: Integer?
          attr_accessor contents: Array[FlexSpan]?
          attr_accessor adjust_mode: 'shrink-to-fit'?
          attr_accessor scaling: bool?
          

          # @param flex [Integer,nil] 
          # @param text [String,nil] 
          # @param size [String,nil] 
          # @param align [String,nil] ('start'|'end'|'center') 
          # @param gravity [String,nil] ('top'|'bottom'|'center') 
          # @param color [String,nil] 
          # @param weight [String,nil] ('regular'|'bold') 
          # @param style [String,nil] ('normal'|'italic') 
          # @param decoration [String,nil] ('none'|'underline'|'line-through') 
          # @param wrap [bool,nil] 
          # @param line_spacing [String,nil] 
          # @param margin [String,nil] 
          # @param position [String,nil] ('relative'|'absolute') 
          # @param offset_top [String,nil] 
          # @param offset_bottom [String,nil] 
          # @param offset_start [String,nil] 
          # @param offset_end [String,nil] 
          # @param action [Action, Hash[Symbol, untyped], nil] 
          # @param max_lines [Integer,nil] 
          # @param contents [Array[FlexSpan, Hash[Symbol, untyped]],nil] 
          # @param adjust_mode [String,nil] ('shrink-to-fit') 
          # @param scaling [bool,nil] 
          def initialize: (
            ?flex: Integer?,
            ?text: String?,
            ?size: String?,
            ?align: 'start'|'end'|'center'?,
            ?gravity: 'top'|'bottom'|'center'?,
            ?color: String?,
            ?weight: 'regular'|'bold'?,
            ?style: 'normal'|'italic'?,
            ?decoration: 'none'|'underline'|'line-through'?,
            ?wrap: bool?,
            ?line_spacing: String?,
            ?margin: String?,
            ?position: 'relative'|'absolute'?,
            ?offset_top: String?,
            ?offset_bottom: String?,
            ?offset_start: String?,
            ?offset_end: String?,
            ?action: Action?| Hash[Symbol, untyped]?,
            ?max_lines: Integer?,
            ?contents: Array[FlexSpan| Hash[Symbol, untyped]]?,
            ?adjust_mode: 'shrink-to-fit'?,
            ?scaling: bool?,
            **untyped dynamic_attributes
          ) -> void

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::MessagingApi::FlexText] Instance of the class
          def self.create: (Hash[Symbol, untyped]) -> FlexText

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==: (untyped other) -> bool

          # @return [Integer] Hash code of the object
          def hash: () -> Integer
        end
      end
    end
  end
end
