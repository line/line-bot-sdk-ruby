# LIFF server API
# LIFF Server API.
#
# The version of the OpenAPI document: 1.0.0
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module Liff
        class LiffApp
          attr_accessor liff_id: String?
          attr_accessor view: LiffView?
          attr_accessor description: String?
          attr_accessor features: LiffFeatures?
          attr_accessor permanent_link_pattern: String?
          attr_accessor scope: Array['openid'|'email'|'profile'|'chat_message.write']?
          attr_accessor bot_prompt: 'normal'|'aggressive'|'none'?
          

          # @param liff_id [String,nil] LIFF app ID
          # @param view [LiffView, Hash[Symbol, untyped], nil] 
          # @param description [String,nil] Name of the LIFF app
          # @param features [LiffFeatures, Hash[Symbol, untyped], nil] 
          # @param permanent_link_pattern [String,nil] How additional information in LIFF URLs is handled. concat is returned. 
          # @param scope [Array['openid','email','profile','chat_message.write'],nil] 
          # @param bot_prompt [String,nil] ('normal'|'aggressive'|'none') 
          def initialize: (
            ?liff_id: String?,
            ?view: LiffView?| Hash[Symbol, untyped]?,
            ?description: String?,
            ?features: LiffFeatures?| Hash[Symbol, untyped]?,
            ?permanent_link_pattern: String?,
            ?scope: Array['openid'|'email'|'profile'|'chat_message.write']?,
            ?bot_prompt: 'normal'|'aggressive'|'none'?,
            **untyped dynamic_attributes
          ) -> void

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::Liff::LiffApp] Instance of the class
          def self.create: (Hash[Symbol, untyped]) -> LiffApp

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==: (untyped other) -> bool

          # @return [Integer] Hash code of the object
          def hash: () -> Integer
        end
      end
    end
  end
end
