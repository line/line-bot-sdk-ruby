# Channel Access Token API
# This document describes Channel Access Token API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module ChannelAccessToken
        # Verification result
        class VerifyChannelAccessTokenResponse
          # @!attribute [rw] client_id
          #   @return [String] The channel ID for which the channel access token was issued.
          attr_accessor :client_id
          # @!attribute [rw] expires_in
          #   @return [Integer] Number of seconds before the channel access token expires.
          attr_accessor :expires_in
          # @!attribute [rw] scope
          #   @return [String,nil] Permissions granted to the channel access token.
          attr_accessor :scope

          # @param client_id [String] The channel ID for which the channel access token was issued.
          # @param expires_in [Integer] Number of seconds before the channel access token expires.
          # @param scope [String,nil] Permissions granted to the channel access token.
          def initialize(
            client_id:,
            expires_in:,
            scope: nil,
            **dynamic_attributes
          )
            
            @client_id = client_id
            @expires_in = expires_in
            @scope = scope

            dynamic_attributes.each do |key, value|
              self.class.attr_accessor key

              if value.is_a?(Hash)
                struct_klass = Struct.new(*value.keys.map(&:to_sym))
                struct_values = value.map { |_k, v| v.is_a?(Hash) ? Line::Bot::V2::Utils.hash_to_struct(v) : v }
                instance_variable_set("@#{key}", struct_klass.new(*struct_values))
              else
                instance_variable_set("@#{key}", value)
              end
            end
          end

          def self.create(args)
            return new(**args)
          end
        end
      end
    end
  end
end
