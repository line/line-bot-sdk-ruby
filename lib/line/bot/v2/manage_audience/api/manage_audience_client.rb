# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

require 'json'

require 'line/bot/v2/http_client'
require 'line/bot/v2/reserved_words'
require 'line/bot/v2/utils'

module Line
  module Bot
    module V2
      module ManageAudience
        class ApiClient
          def initialize(base_url: nil, channel_access_token:, http_options: {})
            @http_client = HttpClient.new(
              base_url: base_url || 'https://api.line.me',
              http_headers: {
                Authorization: "Bearer #{channel_access_token}"
              },
              http_options: http_options
            )
          end

          # Activate audience
          #
          # @param audience_group_id The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#activate-audience-group
          def activate_audience_group_with_http_info(
            audience_group_id:
          )
            path = "/v2/bot/audienceGroup/{audienceGroupId}/activate"
              .gsub(/{audienceGroupId}/, audience_group_id)

            response = @http_client.put(
              path: path,
            )

            body = case response.code.to_i
                   when 202
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Activate audience
          #
          # @param audience_group_id The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#activate-audience-group
          def activate_audience_group(
            audience_group_id:
          )
            body, _status_code, _headers = activate_audience_group_with_http_info(
              audience_group_id: audience_group_id
            )

            body
          end

          # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
          #
          # @param add_audience_to_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group
          def add_audience_to_audience_group_with_http_info(
            add_audience_to_audience_group_request:
          )
            path = "/v2/bot/audienceGroup/upload"

            response = @http_client.put(
              path: path,
              body_params: add_audience_to_audience_group_request,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
          #
          # @param add_audience_to_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#update-upload-audience-group
          def add_audience_to_audience_group(
            add_audience_to_audience_group_request:
          )
            body, _status_code, _headers = add_audience_to_audience_group_with_http_info(
              add_audience_to_audience_group_request: add_audience_to_audience_group_request
            )

            body
          end

          # Create audience for uploading user IDs (by JSON)
          #
          # @param create_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group
          def create_audience_group_with_http_info(
            create_audience_group_request:
          )
            path = "/v2/bot/audienceGroup/upload"

            response = @http_client.post(
              path: path,
              body_params: create_audience_group_request,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::ManageAudience::CreateAudienceGroupResponse.new(**json)
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Create audience for uploading user IDs (by JSON)
          #
          # @param create_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-upload-audience-group
          def create_audience_group(
            create_audience_group_request:
          )
            body, _status_code, _headers = create_audience_group_with_http_info(
              create_audience_group_request: create_audience_group_request
            )

            body
          end

          # Create audience for click-based retargeting
          #
          # @param create_click_based_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-click-audience-group
          def create_click_based_audience_group_with_http_info(
            create_click_based_audience_group_request:
          )
            path = "/v2/bot/audienceGroup/click"

            response = @http_client.post(
              path: path,
              body_params: create_click_based_audience_group_request,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::ManageAudience::CreateClickBasedAudienceGroupResponse.new(**json)
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Create audience for click-based retargeting
          #
          # @param create_click_based_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-click-audience-group
          def create_click_based_audience_group(
            create_click_based_audience_group_request:
          )
            body, _status_code, _headers = create_click_based_audience_group_with_http_info(
              create_click_based_audience_group_request: create_click_based_audience_group_request
            )

            body
          end

          # Create audience for impression-based retargeting
          #
          # @param create_imp_based_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-imp-audience-group
          def create_imp_based_audience_group_with_http_info(
            create_imp_based_audience_group_request:
          )
            path = "/v2/bot/audienceGroup/imp"

            response = @http_client.post(
              path: path,
              body_params: create_imp_based_audience_group_request,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::ManageAudience::CreateImpBasedAudienceGroupResponse.new(**json)
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Create audience for impression-based retargeting
          #
          # @param create_imp_based_audience_group_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#create-imp-audience-group
          def create_imp_based_audience_group(
            create_imp_based_audience_group_request:
          )
            body, _status_code, _headers = create_imp_based_audience_group_with_http_info(
              create_imp_based_audience_group_request: create_imp_based_audience_group_request
            )

            body
          end

          # Delete audience
          #
          # @param audience_group_id The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-audience-group
          def delete_audience_group_with_http_info(
            audience_group_id:
          )
            path = "/v2/bot/audienceGroup/{audienceGroupId}"
              .gsub(/{audienceGroupId}/, audience_group_id)

            response = @http_client.delete(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Delete audience
          #
          # @param audience_group_id The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#delete-audience-group
          def delete_audience_group(
            audience_group_id:
          )
            body, _status_code, _headers = delete_audience_group_with_http_info(
              audience_group_id: audience_group_id
            )

            body
          end

          # Gets audience data.
          #
          # @param audience_group_id The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-group
          def get_audience_data_with_http_info(
            audience_group_id:
          )
            path = "/v2/bot/audienceGroup/{audienceGroupId}"
              .gsub(/{audienceGroupId}/, audience_group_id)

            response = @http_client.get(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::ManageAudience::GetAudienceDataResponse.new(**json)
                   when 400
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::ManageAudience::ErrorResponse.new(**json)
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Gets audience data.
          #
          # @param audience_group_id The audience ID.
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-group
          def get_audience_data(
            audience_group_id:
          )
            body, _status_code, _headers = get_audience_data_with_http_info(
              audience_group_id: audience_group_id
            )

            body
          end

          # Get the authority level of the audience
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-authority-level
          def get_audience_group_authority_level_with_http_info(
          )
            path = "/v2/bot/audienceGroup/authorityLevel"

            response = @http_client.get(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::ManageAudience::GetAudienceGroupAuthorityLevelResponse.new(**json)
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Get the authority level of the audience
          #
          # @see https://developers.line.biz/en/reference/messaging-api/#get-authority-level
          def get_audience_group_authority_level(
          )
            body, _status_code, _headers = get_audience_group_authority_level_with_http_info(
            )

            body
          end

          # Gets data for more than one audience.
          #
          # @param page The page to return when getting (paginated) results. Must be 1 or higher.
          # @param description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. 
          # @param status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. 
          # @param size The number of audiences per page. Default: 20 Max: 40 
          # @param includes_external_public_groups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. 
          # @param create_route How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-groups
          def get_audience_groups_with_http_info(
            page:,
            description: nil,
            status: nil,
            size: nil,
            includes_external_public_groups: nil,
            create_route: nil
          )
            path = "/v2/bot/audienceGroup/list"
            query_params = {
              "page": page,
              "description": description,
              "status": status,
              "size": size,
              "includesExternalPublicGroups": includes_external_public_groups,
              "createRoute": create_route
            }.compact

            response = @http_client.get(
              path: path,
              query_params: query_params,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::ManageAudience::GetAudienceGroupsResponse.new(**json)
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Gets data for more than one audience.
          #
          # @param page The page to return when getting (paginated) results. Must be 1 or higher.
          # @param description The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. 
          # @param status The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. 
          # @param size The number of audiences per page. Default: 20 Max: 40 
          # @param includes_external_public_groups true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. 
          # @param create_route How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API. 
          # @see https://developers.line.biz/en/reference/messaging-api/#get-audience-groups
          def get_audience_groups(
            page:,
            description: nil,
            status: nil,
            size: nil,
            includes_external_public_groups: nil,
            create_route: nil
          )
            body, _status_code, _headers = get_audience_groups_with_http_info(
              page: page,
              description: description,
              status: status,
              size: size,
              includes_external_public_groups: includes_external_public_groups,
              create_route: create_route
            )

            body
          end

          # Change the authority level of the audience
          #
          # @param update_audience_group_authority_level_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#change-authority-level
          def update_audience_group_authority_level_with_http_info(
            update_audience_group_authority_level_request:
          )
            path = "/v2/bot/audienceGroup/authorityLevel"

            response = @http_client.put(
              path: path,
              body_params: update_audience_group_authority_level_request,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Change the authority level of the audience
          #
          # @param update_audience_group_authority_level_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#change-authority-level
          def update_audience_group_authority_level(
            update_audience_group_authority_level_request:
          )
            body, _status_code, _headers = update_audience_group_authority_level_with_http_info(
              update_audience_group_authority_level_request: update_audience_group_authority_level_request
            )

            body
          end

          # Renames an existing audience.
          #
          # @param audience_group_id The audience ID.
          # @param update_audience_group_description_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#set-description-audience-group
          def update_audience_group_description_with_http_info(
            audience_group_id:,
            update_audience_group_description_request:
          )
            path = "/v2/bot/audienceGroup/{audienceGroupId}/updateDescription"
              .gsub(/{audienceGroupId}/, audience_group_id)

            response = @http_client.put(
              path: path,
              body_params: update_audience_group_description_request,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Renames an existing audience.
          #
          # @param audience_group_id The audience ID.
          # @param update_audience_group_description_request 
          # @see https://developers.line.biz/en/reference/messaging-api/#set-description-audience-group
          def update_audience_group_description(
            audience_group_id:,
            update_audience_group_description_request:
          )
            body, _status_code, _headers = update_audience_group_description_with_http_info(
              audience_group_id: audience_group_id,
              update_audience_group_description_request: update_audience_group_description_request
            )

            body
          end
        end
      end
    end
  end
end
