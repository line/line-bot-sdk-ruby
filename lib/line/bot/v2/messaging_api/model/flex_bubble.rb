# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

require_relative './flex_container'

module Line
  module Bot
    module V2
      module MessagingApi
        class FlexBubble < FlexContainer
          # @!attribute [r] type
          #   @return [String] 
          attr_reader :type
          # @!attribute [rw] direction
          #   @return [String,nil] ('ltr'|'rtl') 
          attr_accessor :direction
          # @!attribute [rw] styles
          #   @return [FlexBubbleStyles,nil] 
          attr_accessor :styles
          # @!attribute [rw] header
          #   @return [FlexBox,nil] 
          attr_accessor :header
          # @!attribute [rw] hero
          #   @return [FlexComponent,nil] 
          attr_accessor :hero
          # @!attribute [rw] body
          #   @return [FlexBox,nil] 
          attr_accessor :body
          # @!attribute [rw] footer
          #   @return [FlexBox,nil] 
          attr_accessor :footer
          # @!attribute [rw] size
          #   @return [String,nil] ('nano'|'micro'|'deca'|'hecto'|'kilo'|'mega'|'giga') 
          attr_accessor :size
          # @!attribute [rw] action
          #   @return [Action,nil] 
          attr_accessor :action

          # @param direction [String,nil] ('ltr'|'rtl') 
          # @param styles [FlexBubbleStyles, Hash[Symbol, untyped], nil] 
          # @param header [FlexBox, Hash[Symbol, untyped], nil] 
          # @param hero [FlexComponent, Hash[Symbol, untyped], nil] 
          # @param body [FlexBox, Hash[Symbol, untyped], nil] 
          # @param footer [FlexBox, Hash[Symbol, untyped], nil] 
          # @param size [String,nil] ('nano'|'micro'|'deca'|'hecto'|'kilo'|'mega'|'giga') 
          # @param action [Action, Hash[Symbol, untyped], nil] 
          def initialize(
            direction: nil,
            styles: nil,
            header: nil,
            hero: nil,
            body: nil,
            footer: nil,
            size: nil,
            action: nil,
            **dynamic_attributes
          )
            @type = "bubble"
            
            @direction = direction
            @styles = styles.is_a?(Line::Bot::V2::MessagingApi::FlexBubbleStyles) || styles.nil? ? styles : Line::Bot::V2::MessagingApi::FlexBubbleStyles.create(**styles) # steep:ignore
            @header = header.is_a?(Line::Bot::V2::MessagingApi::FlexBox) || header.nil? ? header : Line::Bot::V2::MessagingApi::FlexBox.create(**header) # steep:ignore
            @hero = hero.is_a?(Line::Bot::V2::MessagingApi::FlexComponent) || hero.nil? ? hero : Line::Bot::V2::MessagingApi::FlexComponent.create(**hero) # steep:ignore
            @body = body.is_a?(Line::Bot::V2::MessagingApi::FlexBox) || body.nil? ? body : Line::Bot::V2::MessagingApi::FlexBox.create(**body) # steep:ignore
            @footer = footer.is_a?(Line::Bot::V2::MessagingApi::FlexBox) || footer.nil? ? footer : Line::Bot::V2::MessagingApi::FlexBox.create(**footer) # steep:ignore
            @size = size
            @action = action.is_a?(Line::Bot::V2::MessagingApi::Action) || action.nil? ? action : Line::Bot::V2::MessagingApi::Action.create(**action) # steep:ignore

            dynamic_attributes.each do |key, value|
              self.class.attr_accessor key

              if value.is_a?(Hash)
                struct_klass = Struct.new(*value.keys.map(&:to_sym))
                struct_values = value.map { |_k, v| v.is_a?(Hash) ? Line::Bot::V2::Utils.hash_to_struct(v) : v }
                instance_variable_set("@#{key}", struct_klass.new(*struct_values))
              else
                instance_variable_set("@#{key}", value)
              end
            end
          end

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::MessagingApi::FlexBubble] Instance of the class
          def self.create(args) # steep:ignore
            symbolized_args = Line::Bot::V2::Utils.deep_symbolize(args)
            return new(**symbolized_args) # steep:ignore
          end

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==(other)
            return false unless self.class == other.class

            instance_variables.all? do |var|
                instance_variable_get(var) == other.instance_variable_get(var)
            end
          end

          # @return [Integer] Hash code of the object
          def hash
            [self.class, *instance_variables.map { |var| instance_variable_get(var) }].hash
          end
        end
      end
    end
  end
end
