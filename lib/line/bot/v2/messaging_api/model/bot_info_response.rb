# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module MessagingApi
        # @see https://developers.line.biz/en/reference/messaging-api/#get-bot-info
        class BotInfoResponse
          # @!attribute [rw] user_id
          #   @return [String] Bot's user ID
          attr_accessor :user_id
          # @!attribute [rw] basic_id
          #   @return [String] Bot's basic ID
          attr_accessor :basic_id
          # @!attribute [rw] premium_id
          #   @return [String,nil] Bot's premium ID. Not included in the response if the premium ID isn't set.
          attr_accessor :premium_id
          # @!attribute [rw] display_name
          #   @return [String] Bot's display name
          attr_accessor :display_name
          # @!attribute [rw] picture_url
          #   @return [String,nil] Profile image URL. `https` image URL. Not included in the response if the bot doesn't have a profile image.
          attr_accessor :picture_url
          # @!attribute [rw] chat_mode
          #   @return [String] ('chat'|'bot') Chat settings set in the LINE Official Account Manager. One of:  `chat`: Chat is set to \"On\". `bot`: Chat is set to \"Off\". 
          attr_accessor :chat_mode
          # @!attribute [rw] mark_as_read_mode
          #   @return [String] ('auto'|'manual') Automatic read setting for messages. If the chat is set to \"Off\", auto is returned. If the chat is set to \"On\", manual is returned.  `auto`: Auto read setting is enabled. `manual`: Auto read setting is disabled.  
          attr_accessor :mark_as_read_mode

          # @param user_id [String] Bot's user ID
          # @param basic_id [String] Bot's basic ID
          # @param premium_id [String,nil] Bot's premium ID. Not included in the response if the premium ID isn't set.
          # @param display_name [String] Bot's display name
          # @param picture_url [String,nil] Profile image URL. `https` image URL. Not included in the response if the bot doesn't have a profile image.
          # @param chat_mode [String] ('chat'|'bot') Chat settings set in the LINE Official Account Manager. One of:  `chat`: Chat is set to \"On\". `bot`: Chat is set to \"Off\". 
          # @param mark_as_read_mode [String] ('auto'|'manual') Automatic read setting for messages. If the chat is set to \"Off\", auto is returned. If the chat is set to \"On\", manual is returned.  `auto`: Auto read setting is enabled. `manual`: Auto read setting is disabled.  
          def initialize(
            user_id:,
            basic_id:,
            premium_id: nil,
            display_name:,
            picture_url: nil,
            chat_mode:,
            mark_as_read_mode:,
            **dynamic_attributes
          )
            
            @user_id = user_id
            @basic_id = basic_id
            @premium_id = premium_id
            @display_name = display_name
            @picture_url = picture_url
            @chat_mode = chat_mode
            @mark_as_read_mode = mark_as_read_mode

            dynamic_attributes.each do |key, value|
              self.class.attr_accessor key

              if value.is_a?(Hash)
                struct_klass = Struct.new(*value.keys.map(&:to_sym))
                struct_values = value.map { |_k, v| v.is_a?(Hash) ? Line::Bot::V2::Utils.hash_to_struct(v) : v }
                instance_variable_set("@#{key}", struct_klass.new(*struct_values))
              else
                instance_variable_set("@#{key}", value)
              end
            end
          end

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::MessagingApi::BotInfoResponse] Instance of the class
          def self.create(args) # steep:ignore
            symbolized_args = Line::Bot::V2::Utils.deep_symbolize(args)
            return new(**symbolized_args) # steep:ignore
          end

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==(other)
            return false unless self.class == other.class

            instance_variables.all? do |var|
                instance_variable_get(var) == other.instance_variable_get(var)
            end
          end

          # @return [Integer] Hash code of the object
          def hash
            [self.class, *instance_variables.map { |var| instance_variable_get(var) }].hash
          end
        end
      end
    end
  end
end
