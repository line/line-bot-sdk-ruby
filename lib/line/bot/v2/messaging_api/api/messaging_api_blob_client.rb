# LINE Messaging API
# This document describes LINE Messaging API.
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

require 'json'

require 'line/bot/v2/http_client'
require 'line/bot/v2/reserved_words'
require 'line/bot/v2/utils'

module Line
  module Bot
    module V2
      module MessagingApi
        class ApiBlobClient
          def initialize(base_url: nil, channel_access_token:, http_options: {})
            @http_client = HttpClient.new(
              base_url: base_url || 'https://api-data.line.me',
              http_headers: {
                Authorization: "Bearer #{channel_access_token}"
              },
              http_options: http_options
            )
          end

          # Download image, video, and audio data sent from users.
          #
          # @param message_id Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#get-content
          def get_message_content_with_http_info(
            message_id:
          )
            path = "/v2/bot/message/{messageId}/content"
              .gsub(/{messageId}/, message_id)

            response = @http_client.get(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Download image, video, and audio data sent from users.
          #
          # @param message_id Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#get-content
          def get_message_content(
            message_id:
          )
            body, _status_code, _headers = get_message_content_with_http_info(
              message_id: message_id
            )

            body
          end

          # Get a preview image of the image or video
          #
          # @param message_id Message ID of image or video
          # @see https://developers.line.biz/en/reference/messaging-api/#get-image-or-video-preview
          def get_message_content_preview_with_http_info(
            message_id:
          )
            path = "/v2/bot/message/{messageId}/content/preview"
              .gsub(/{messageId}/, message_id)

            response = @http_client.get(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Get a preview image of the image or video
          #
          # @param message_id Message ID of image or video
          # @see https://developers.line.biz/en/reference/messaging-api/#get-image-or-video-preview
          def get_message_content_preview(
            message_id:
          )
            body, _status_code, _headers = get_message_content_preview_with_http_info(
              message_id: message_id
            )

            body
          end

          # Verify the preparation status of a video or audio for getting
          #
          # @param message_id Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-video-or-audio-preparation-status
          def get_message_content_transcoding_by_message_id_with_http_info(
            message_id:
          )
            path = "/v2/bot/message/{messageId}/content/transcoding"
              .gsub(/{messageId}/, message_id)

            response = @http_client.get(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::MessagingApi::GetMessageContentTranscodingResponse.new(**json)
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Verify the preparation status of a video or audio for getting
          #
          # @param message_id Message ID of video or audio
          # @see https://developers.line.biz/en/reference/messaging-api/#verify-video-or-audio-preparation-status
          def get_message_content_transcoding_by_message_id(
            message_id:
          )
            body, _status_code, _headers = get_message_content_transcoding_by_message_id_with_http_info(
              message_id: message_id
            )

            body
          end

          # Download rich menu image.
          #
          # @param rich_menu_id ID of the rich menu with the image to be downloaded
          # @see https://developers.line.biz/en/reference/messaging-api/#download-rich-menu-image
          def get_rich_menu_image_with_http_info(
            rich_menu_id:
          )
            path = "/v2/bot/richmenu/{richMenuId}/content"
              .gsub(/{richMenuId}/, rich_menu_id)

            response = @http_client.get(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Download rich menu image.
          #
          # @param rich_menu_id ID of the rich menu with the image to be downloaded
          # @see https://developers.line.biz/en/reference/messaging-api/#download-rich-menu-image
          def get_rich_menu_image(
            rich_menu_id:
          )
            body, _status_code, _headers = get_rich_menu_image_with_http_info(
              rich_menu_id: rich_menu_id
            )

            body
          end

          # Upload rich menu image
          #
          # @param rich_menu_id The ID of the rich menu to attach the image to
          # @param body 
          # @see https://developers.line.biz/en/reference/messaging-api/#upload-rich-menu-image
          def set_rich_menu_image_with_http_info(
            rich_menu_id:,
            body: nil
          )
            path = "/v2/bot/richmenu/{richMenuId}/content"
              .gsub(/{richMenuId}/, rich_menu_id)

            response = @http_client.post(
              path: path,
              body_params: body,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Upload rich menu image
          #
          # @param rich_menu_id The ID of the rich menu to attach the image to
          # @param body 
          # @see https://developers.line.biz/en/reference/messaging-api/#upload-rich-menu-image
          def set_rich_menu_image(
            rich_menu_id:,
            body: nil
          )
            body, _status_code, _headers = set_rich_menu_image_with_http_info(
              rich_menu_id: rich_menu_id,
              body: body
            )

            body
          end
        end
      end
    end
  end
end
