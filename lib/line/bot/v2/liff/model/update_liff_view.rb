# LIFF server API
# LIFF Server API.
#
# The version of the OpenAPI document: 1.0.0
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module Liff
        # @see https://developers.line.biz/en/reference/liff-server/#update-liff-app
        class UpdateLiffView
          # @!attribute [rw] type
          #   @return [String,nil] ('compact'|'tall'|'full') Size of the LIFF app view. Specify one of these values: - compact - tall - full 
          attr_accessor :type
          # @!attribute [rw] url
          #   @return [String,nil] Endpoint URL. This is the URL of the web app that implements the LIFF app (e.g. https://example.com). Used when the LIFF app is launched using the LIFF URL. The URL scheme must be https. URL fragments (#URL-fragment) can't be specified. 
          attr_accessor :url
          # @!attribute [rw] module_mode
          #   @return [Boolean,nil] `true` to use the LIFF app in modular mode. When in modular mode, the action button in the header is not displayed. 
          attr_accessor :module_mode

          # @param type [String,nil] ('compact'|'tall'|'full') Size of the LIFF app view. Specify one of these values: - compact - tall - full 
          # @param url [String,nil] Endpoint URL. This is the URL of the web app that implements the LIFF app (e.g. https://example.com). Used when the LIFF app is launched using the LIFF URL. The URL scheme must be https. URL fragments (#URL-fragment) can't be specified. 
          # @param module_mode [Boolean,nil] `true` to use the LIFF app in modular mode. When in modular mode, the action button in the header is not displayed. 
          def initialize(
            type: nil,
            url: nil,
            module_mode: nil,
            **dynamic_attributes
          )
            
            @type = type
            @url = url
            @module_mode = module_mode

            dynamic_attributes.each do |key, value|
              self.class.attr_accessor key

              if value.is_a?(Hash)
                struct_klass = Struct.new(*value.keys.map(&:to_sym))
                struct_values = value.map { |_k, v| v.is_a?(Hash) ? Line::Bot::V2::Utils.hash_to_struct(v) : v }
                instance_variable_set("@#{key}", struct_klass.new(*struct_values))
              else
                instance_variable_set("@#{key}", value)
              end
            end
          end

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::Liff::UpdateLiffView] Instance of the class
          def self.create(args) # steep:ignore
            symbolized_args = Line::Bot::V2::Utils.deep_symbolize(args)
            return new(**symbolized_args) # steep:ignore
          end

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==(other)
            return false unless self.class == other.class

            instance_variables.all? do |var|
                instance_variable_get(var) == other.instance_variable_get(var)
            end
          end

          # @return [Integer] Hash code of the object
          def hash
            [self.class, *instance_variables.map { |var| instance_variable_get(var) }].hash
          end
        end
      end
    end
  end
end
