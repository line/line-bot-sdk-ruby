# LIFF server API
# LIFF Server API.
#
# The version of the OpenAPI document: 1.0.0
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

require 'json'

require 'line/bot/v2/http_client'
require 'line/bot/v2/reserved_words'
require 'line/bot/v2/utils'

module Line
  module Bot
    module V2
      module Liff
        class ApiClient
          def initialize(base_url: nil, channel_access_token:, http_options: {})
            @http_client = HttpClient.new(
              base_url: base_url || 'https://api.line.me',
              http_headers: {
                Authorization: "Bearer #{channel_access_token}"
              },
              http_options: http_options
            )
          end

          # Adding the LIFF app to a channel
          #
          # @summary Create LIFF app
          # @param add_liff_app_request 
          # @see https://developers.line.biz/en/reference/liff-server/#add-liff-app
          def add_liff_app_with_http_info(
            add_liff_app_request:
          )
            path = "/liff/v1/apps"

            response = @http_client.post(
              path: path,
              body_params: add_liff_app_request,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::Liff::AddLiffAppResponse.new(**json)
                   when 400
                     response.body
                   when 401
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Adding the LIFF app to a channel
          #
          # @summary Create LIFF app
          # @param add_liff_app_request 
          # @see https://developers.line.biz/en/reference/liff-server/#add-liff-app
          def add_liff_app(
            add_liff_app_request:
          )
            body, _status_code, _headers = add_liff_app_with_http_info(
              add_liff_app_request: add_liff_app_request
            )

            body
          end

          # Deletes a LIFF app from a channel. 
          #
          # @summary Delete LIFF app from a channel
          # @param liff_id ID of the LIFF app to be updated
          # @see https://developers.line.biz/en/reference/liff-server/#delete-liff-app
          def delete_liff_app_with_http_info(
            liff_id:
          )
            path = "/liff/v1/apps/{liffId}"
              .gsub(/{liffId}/, liff_id)

            response = @http_client.delete(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   when 401
                     response.body
                   when 404
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Deletes a LIFF app from a channel. 
          #
          # @summary Delete LIFF app from a channel
          # @param liff_id ID of the LIFF app to be updated
          # @see https://developers.line.biz/en/reference/liff-server/#delete-liff-app
          def delete_liff_app(
            liff_id:
          )
            body, _status_code, _headers = delete_liff_app_with_http_info(
              liff_id: liff_id
            )

            body
          end

          # Gets information on all the LIFF apps added to the channel.
          #
          # @summary Get all LIFF apps
          # @see https://developers.line.biz/en/reference/liff-server/#get-all-liff-apps
          def get_all_liff_apps_with_http_info(
          )
            path = "/liff/v1/apps"

            response = @http_client.get(
              path: path,
            )

            body = case response.code.to_i
                   when 200
                     json = Line::Bot::V2::Utils.deep_underscore(JSON.parse(response.body))
                     json.transform_keys! do |key|
                       Line::Bot::V2::RESERVED_WORDS.include?(key) ? "_#{key}".to_sym : key
                     end
                     Line::Bot::V2::Liff::GetAllLiffAppsResponse.new(**json)
                   when 401
                     response.body
                   when 404
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Gets information on all the LIFF apps added to the channel.
          #
          # @summary Get all LIFF apps
          # @see https://developers.line.biz/en/reference/liff-server/#get-all-liff-apps
          def get_all_liff_apps(
          )
            body, _status_code, _headers = get_all_liff_apps_with_http_info(
            )

            body
          end

          # Update LIFF app settings
          #
          # @summary Update LIFF app from a channel
          # @param liff_id ID of the LIFF app to be updated
          # @param update_liff_app_request 
          # @see https://developers.line.biz/en/reference/liff-server/#update-liff-app
          def update_liff_app_with_http_info(
            liff_id:,
            update_liff_app_request:
          )
            path = "/liff/v1/apps/{liffId}"
              .gsub(/{liffId}/, liff_id)

            response = @http_client.put(
              path: path,
              body_params: update_liff_app_request,
            )

            body = case response.code.to_i
                   when 200
                     response.body
                   when 400
                     response.body
                   when 401
                     response.body
                   when 404
                     response.body
                   else
                     response.body
                   end

            [body, response.code.to_i, response.each_header.to_h]
          end

          # Update LIFF app settings
          #
          # @summary Update LIFF app from a channel
          # @param liff_id ID of the LIFF app to be updated
          # @param update_liff_app_request 
          # @see https://developers.line.biz/en/reference/liff-server/#update-liff-app
          def update_liff_app(
            liff_id:,
            update_liff_app_request:
          )
            body, _status_code, _headers = update_liff_app_with_http_info(
              liff_id: liff_id,
              update_liff_app_request: update_liff_app_request
            )

            body
          end
        end
      end
    end
  end
end
