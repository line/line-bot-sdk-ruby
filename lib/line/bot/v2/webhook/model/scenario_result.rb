# Webhook Type Definition
# Webhook event definition of the LINE Messaging API
#
# The version of the OpenAPI document: 1.0.0
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module Webhook
        # @see https://developers.line.biz/en/reference/messaging-api/#scenario-result-event
        class ScenarioResult
          attr_accessor :scenario_id # Scenario ID executed
          attr_accessor :revision # Revision number of the scenario set containing the executed scenario
          attr_accessor :start_time # Timestamp for when execution of scenario action started (milliseconds, LINE app time)
          attr_accessor :end_time # Timestamp for when execution of scenario was completed (milliseconds, LINE app time)
          attr_accessor :result_code # Scenario execution completion status
          attr_accessor :action_results # Execution result of individual operations specified in action. Only included when things.result.resultCode is success.
          attr_accessor :ble_notification_payload # Data contained in notification.
          attr_accessor :error_reason # Error reason.

          def initialize(
            scenario_id: nil,
            revision: nil,
            start_time:,
            end_time:,
            result_code:,
            action_results: nil,
            ble_notification_payload: nil,
            error_reason: nil,
            **dynamic_attributes
          )
            
            @scenario_id = scenario_id
            @revision = revision
            @start_time = start_time
            @end_time = end_time
            @result_code = result_code
            @action_results = action_results&.map do |item|
              if item.is_a?(Hash)
                Line::Bot::V2::Webhook::ActionResult.create(**item)
              else
                item
              end
            end
            @ble_notification_payload = ble_notification_payload
            @error_reason = error_reason

            dynamic_attributes.each do |key, value|
              self.class.attr_accessor key

              if value.is_a?(Hash)
                struct_klass = Struct.new(*value.keys.map(&:to_sym))
                struct_values = value.map { |_k, v| v.is_a?(Hash) ? Line::Bot::V2::Utils.hash_to_struct(v) : v }
                instance_variable_set("@#{key}", struct_klass.new(*struct_values))
              else
                instance_variable_set("@#{key}", value)
              end
            end
          end

          def self.create(args)
            return new(**args)
          end
        end
      end
    end
  end
end
