# LINE Messaging API(Insight)
# This document describes LINE Messaging API(Insight).
#
# The version of the OpenAPI document: 0.0.1
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

module Line
  module Bot
    module V2
      module Insight
        # Response object for `get statistics per unit`
        # @see https://developers.line.biz/en/reference/messaging-api/#get-statistics-per-unit-response
        class GetStatisticsPerUnitResponse
          # @!attribute [rw] overview
          #   @return [GetStatisticsPerUnitResponseOverview] 
          attr_accessor :overview
          # @!attribute [rw] messages
          #   @return [Array[GetStatisticsPerUnitResponseMessage]] Array of information about individual message bubbles.
          attr_accessor :messages
          # @!attribute [rw] clicks
          #   @return [Array[GetStatisticsPerUnitResponseClick]] Array of information about opened URLs in the message.
          attr_accessor :clicks

          # @param overview [GetStatisticsPerUnitResponseOverview, Hash[Symbol, untyped]] 
          # @param messages [Array[GetStatisticsPerUnitResponseMessage, Hash[Symbol, untyped]]] Array of information about individual message bubbles.
          # @param clicks [Array[GetStatisticsPerUnitResponseClick, Hash[Symbol, untyped]]] Array of information about opened URLs in the message.
          def initialize(
            overview:,
            messages:,
            clicks:,
            **dynamic_attributes
          )
            
            @overview = overview.is_a?(Line::Bot::V2::Insight::GetStatisticsPerUnitResponseOverview) ? overview : Line::Bot::V2::Insight::GetStatisticsPerUnitResponseOverview.create(**overview) # steep:ignore
            @messages = messages.map do |item|
              if item.is_a?(Hash)
                Line::Bot::V2::Insight::GetStatisticsPerUnitResponseMessage.create(**item) # steep:ignore InsufficientKeywordArguments
              else
                item
              end
            end
            @clicks = clicks.map do |item|
              if item.is_a?(Hash)
                Line::Bot::V2::Insight::GetStatisticsPerUnitResponseClick.create(**item) # steep:ignore InsufficientKeywordArguments
              else
                item
              end
            end

            dynamic_attributes.each do |key, value|
              self.class.attr_accessor key

              if value.is_a?(Hash)
                struct_klass = Struct.new(*value.keys.map(&:to_sym))
                struct_values = value.map { |_k, v| v.is_a?(Hash) ? Line::Bot::V2::Utils.hash_to_struct(v) : v }
                instance_variable_set("@#{key}", struct_klass.new(*struct_values))
              else
                instance_variable_set("@#{key}", value)
              end
            end
          end

          # Create an instance of the class from a hash
          # @param args [Hash] Hash containing all the required attributes
          # @return [Line::Bot::V2::Insight::GetStatisticsPerUnitResponse] Instance of the class
          def self.create(args) # steep:ignore
            symbolized_args = Line::Bot::V2::Utils.deep_symbolize(args)
            return new(**symbolized_args) # steep:ignore
          end

          # @param other [Object] Object to compare
          # @return [Boolean] true if the objects are equal, false otherwise
          def ==(other)
            return false unless self.class == other.class

            instance_variables.all? do |var|
                instance_variable_get(var) == other.instance_variable_get(var)
            end
          end

          # @return [Integer] Hash code of the object
          def hash
            [self.class, *instance_variables.map { |var| instance_variable_get(var) }].hash
          end
        end
      end
    end
  end
end
