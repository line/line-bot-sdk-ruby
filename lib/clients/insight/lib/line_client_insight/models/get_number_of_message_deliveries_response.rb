=begin
#LINE Messaging API(Insight)

#This document describes LINE Messaging API(Insight).

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0

=end

require 'date'
require 'time'

module LINE::Client::Insight
  # Get number of message deliveries
  class GetNumberOfMessageDeliveriesResponse
    # Status of the counting process.
    attr_accessor :status

    # Number of messages sent to all of this LINE Official Account's friends (broadcast messages).
    attr_accessor :broadcast

    # Number of messages sent to some of this LINE Official Account's friends, based on specific attributes (targeted messages).
    attr_accessor :targeting

    # Number of auto-response messages sent.
    attr_accessor :auto_response

    # Number of greeting messages sent.
    attr_accessor :welcome_response

    # Number of messages sent from LINE Official Account Manager [Chat screen](https://www.linebiz.com/jp/manual/OfficialAccountManager/chats/) (only available in Japanese).
    attr_accessor :chat

    # Number of broadcast messages sent with the `Send broadcast message` Messaging API operation.
    attr_accessor :api_broadcast

    # Number of push messages sent with the `Send push message` Messaging API operation.
    attr_accessor :api_push

    # Number of multicast messages sent with the `Send multicast message` Messaging API operation.
    attr_accessor :api_multicast

    # Number of narrowcast messages sent with the `Send narrowcast message` Messaging API operation.
    attr_accessor :api_narrowcast

    # Number of replies sent with the `Send reply message` Messaging API operation.
    attr_accessor :api_reply

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'broadcast' => :'broadcast',
        :'targeting' => :'targeting',
        :'auto_response' => :'autoResponse',
        :'welcome_response' => :'welcomeResponse',
        :'chat' => :'chat',
        :'api_broadcast' => :'apiBroadcast',
        :'api_push' => :'apiPush',
        :'api_multicast' => :'apiMulticast',
        :'api_narrowcast' => :'apiNarrowcast',
        :'api_reply' => :'apiReply'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Returns the key-value map of all the JSON attributes this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'broadcast' => :'Integer',
        :'targeting' => :'Integer',
        :'auto_response' => :'Integer',
        :'welcome_response' => :'Integer',
        :'chat' => :'Integer',
        :'api_broadcast' => :'Integer',
        :'api_push' => :'Integer',
        :'api_multicast' => :'Integer',
        :'api_narrowcast' => :'Integer',
        :'api_reply' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LINE::Client::Insight::GetNumberOfMessageDeliveriesResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LINE::Client::Insight::GetNumberOfMessageDeliveriesResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'broadcast')
        self.broadcast = attributes[:'broadcast']
      end

      if attributes.key?(:'targeting')
        self.targeting = attributes[:'targeting']
      end

      if attributes.key?(:'auto_response')
        self.auto_response = attributes[:'auto_response']
      end

      if attributes.key?(:'welcome_response')
        self.welcome_response = attributes[:'welcome_response']
      end

      if attributes.key?(:'chat')
        self.chat = attributes[:'chat']
      end

      if attributes.key?(:'api_broadcast')
        self.api_broadcast = attributes[:'api_broadcast']
      end

      if attributes.key?(:'api_push')
        self.api_push = attributes[:'api_push']
      end

      if attributes.key?(:'api_multicast')
        self.api_multicast = attributes[:'api_multicast']
      end

      if attributes.key?(:'api_narrowcast')
        self.api_narrowcast = attributes[:'api_narrowcast']
      end

      if attributes.key?(:'api_reply')
        self.api_reply = attributes[:'api_reply']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["ready", "unready", "out_of_service"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ready", "unready", "out_of_service"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          broadcast == o.broadcast &&
          targeting == o.targeting &&
          auto_response == o.auto_response &&
          welcome_response == o.welcome_response &&
          chat == o.chat &&
          api_broadcast == o.api_broadcast &&
          api_push == o.api_push &&
          api_multicast == o.api_multicast &&
          api_narrowcast == o.api_narrowcast &&
          api_reply == o.api_reply
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, broadcast, targeting, auto_response, welcome_response, chat, api_broadcast, api_push, api_multicast, api_narrowcast, api_reply].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LINE::Client::Insight.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
