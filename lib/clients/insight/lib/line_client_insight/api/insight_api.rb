=begin
#LINE Messaging API(Insight)

#This document describes LINE Messaging API(Insight).

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0

=end

require 'cgi'

module LINE::Client::Insight
  class InsightApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves the demographic attributes for a LINE Official Account's friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
    # @param [Hash] opts the optional parameters
    # @return [GetFriendsDemographicsResponse]
    def get_friends_demographics(opts = {})
      data, _status_code, _headers = get_friends_demographics_with_http_info(opts)
      data
    end

    # Retrieves the demographic attributes for a LINE Official Account&#39;s friends.You can only retrieve information about friends for LINE Official Accounts created by users in Japan (JP), Thailand (TH), Taiwan (TW) and Indonesia (ID). 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetFriendsDemographicsResponse, Integer, Hash)>] GetFriendsDemographicsResponse data, response status code and response headers
    def get_friends_demographics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_friends_demographics ...'
      end
      # resource path
      local_var_path = '/v2/bot/insight/demographic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFriendsDemographicsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InsightApi.get_friends_demographics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_friends_demographics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user interaction statistics
    # Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
    # @param request_id [String] Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. 
    # @param [Hash] opts the optional parameters
    # @return [GetMessageEventResponse]
    def get_message_event(request_id, opts = {})
      data, _status_code, _headers = get_message_event_with_http_info(request_id, opts)
      data
    end

    # Get user interaction statistics
    # Returns statistics about how users interact with narrowcast messages or broadcast messages sent from your LINE Official Account. 
    # @param request_id [String] Request ID of a narrowcast message or broadcast message. Each Messaging API request has a request ID. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMessageEventResponse, Integer, Hash)>] GetMessageEventResponse data, response status code and response headers
    def get_message_event_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_message_event ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling InsightApi.get_message_event"
      end
      if @api_client.config.client_side_validation && request_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "request_id" when calling InsightApi.get_message_event, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/v2/bot/insight/message/event'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'requestId'] = request_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMessageEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InsightApi.get_message_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_message_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of followers
    # Returns the number of users who have added the LINE Official Account on or before a specified date. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 
    # @return [GetNumberOfFollowersResponse]
    def get_number_of_followers(opts = {})
      data, _status_code, _headers = get_number_of_followers_with_http_info(opts)
      data
    end

    # Get number of followers
    # Returns the number of users who have added the LINE Official Account on or before a specified date. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Date for which to retrieve the number of followers.  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 
    # @return [Array<(GetNumberOfFollowersResponse, Integer, Hash)>] GetNumberOfFollowersResponse data, response status code and response headers
    def get_number_of_followers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_number_of_followers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'date'].nil? && opts[:'date'].to_s.length > 8
        fail ArgumentError, 'invalid value for "opts[:"date"]" when calling InsightApi.get_number_of_followers, the character length must be smaller than or equal to 8.'
      end

      if @api_client.config.client_side_validation && !opts[:'date'].nil? && opts[:'date'].to_s.length < 8
        fail ArgumentError, 'invalid value for "opts[:"date"]" when calling InsightApi.get_number_of_followers, the character length must be great than or equal to 8.'
      end

      pattern = Regexp.new(/^[0-9]{8}$/)
      if @api_client.config.client_side_validation && !opts[:'date'].nil? && opts[:'date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"date\"]' when calling InsightApi.get_number_of_followers, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/bot/insight/followers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNumberOfFollowersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InsightApi.get_number_of_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_number_of_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of message deliveries
    # Returns the number of messages sent from LINE Official Account on a specified day. 
    # @param date [String] Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [GetNumberOfMessageDeliveriesResponse]
    def get_number_of_message_deliveries(date, opts = {})
      data, _status_code, _headers = get_number_of_message_deliveries_with_http_info(date, opts)
      data
    end

    # Get number of message deliveries
    # Returns the number of messages sent from LINE Official Account on a specified day. 
    # @param date [String] Date for which to retrieve number of sent messages. - Format: yyyyMMdd (e.g. 20191231) - Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNumberOfMessageDeliveriesResponse, Integer, Hash)>] GetNumberOfMessageDeliveriesResponse data, response status code and response headers
    def get_number_of_message_deliveries_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_number_of_message_deliveries ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling InsightApi.get_number_of_message_deliveries"
      end
      if @api_client.config.client_side_validation && date.to_s.length > 8
        fail ArgumentError, 'invalid value for "date" when calling InsightApi.get_number_of_message_deliveries, the character length must be smaller than or equal to 8.'
      end

      if @api_client.config.client_side_validation && date.to_s.length < 8
        fail ArgumentError, 'invalid value for "date" when calling InsightApi.get_number_of_message_deliveries, the character length must be great than or equal to 8.'
      end

      pattern = Regexp.new(/^[0-9]{8}$/)
      if @api_client.config.client_side_validation && date !~ pattern
        fail ArgumentError, "invalid value for 'date' when calling InsightApi.get_number_of_message_deliveries, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/bot/insight/message/delivery'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNumberOfMessageDeliveriesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InsightApi.get_number_of_message_deliveries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_number_of_message_deliveries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
    # @param custom_aggregation_unit [String] Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. 
    # @param from [String] Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 
    # @param to [String] End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [GetStatisticsPerUnitResponse]
    def get_statistics_per_unit(custom_aggregation_unit, from, to, opts = {})
      data, _status_code, _headers = get_statistics_per_unit_with_http_info(custom_aggregation_unit, from, to, opts)
      data
    end

    # You can check the per-unit statistics of how users interact with push messages and multicast messages sent from your LINE Official Account. 
    # @param custom_aggregation_unit [String] Name of aggregation unit specified when sending the message. Case-sensitive. For example, &#x60;Promotion_a&#x60; and &#x60;Promotion_A&#x60; are regarded as different unit names. 
    # @param from [String] Start date of aggregation period.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 
    # @param to [String] End date of aggregation period. The end date can be specified for up to 30 days later. For example, if the start date is 20210301, the latest end date is 20210331.  Format: yyyyMMdd (e.g. 20210301) Time zone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStatisticsPerUnitResponse, Integer, Hash)>] GetStatisticsPerUnitResponse data, response status code and response headers
    def get_statistics_per_unit_with_http_info(custom_aggregation_unit, from, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightApi.get_statistics_per_unit ...'
      end
      # verify the required parameter 'custom_aggregation_unit' is set
      if @api_client.config.client_side_validation && custom_aggregation_unit.nil?
        fail ArgumentError, "Missing the required parameter 'custom_aggregation_unit' when calling InsightApi.get_statistics_per_unit"
      end
      if @api_client.config.client_side_validation && custom_aggregation_unit.to_s.length > 30
        fail ArgumentError, 'invalid value for "custom_aggregation_unit" when calling InsightApi.get_statistics_per_unit, the character length must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && custom_aggregation_unit.to_s.length < 1
        fail ArgumentError, 'invalid value for "custom_aggregation_unit" when calling InsightApi.get_statistics_per_unit, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9_]{1,30}$/)
      if @api_client.config.client_side_validation && custom_aggregation_unit !~ pattern
        fail ArgumentError, "invalid value for 'custom_aggregation_unit' when calling InsightApi.get_statistics_per_unit, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling InsightApi.get_statistics_per_unit"
      end
      if @api_client.config.client_side_validation && from.to_s.length > 8
        fail ArgumentError, 'invalid value for "from" when calling InsightApi.get_statistics_per_unit, the character length must be smaller than or equal to 8.'
      end

      if @api_client.config.client_side_validation && from.to_s.length < 8
        fail ArgumentError, 'invalid value for "from" when calling InsightApi.get_statistics_per_unit, the character length must be great than or equal to 8.'
      end

      pattern = Regexp.new(/^[0-9]{8}$/)
      if @api_client.config.client_side_validation && from !~ pattern
        fail ArgumentError, "invalid value for 'from' when calling InsightApi.get_statistics_per_unit, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling InsightApi.get_statistics_per_unit"
      end
      if @api_client.config.client_side_validation && to.to_s.length > 8
        fail ArgumentError, 'invalid value for "to" when calling InsightApi.get_statistics_per_unit, the character length must be smaller than or equal to 8.'
      end

      if @api_client.config.client_side_validation && to.to_s.length < 8
        fail ArgumentError, 'invalid value for "to" when calling InsightApi.get_statistics_per_unit, the character length must be great than or equal to 8.'
      end

      pattern = Regexp.new(/^[0-9]{8}$/)
      if @api_client.config.client_side_validation && to !~ pattern
        fail ArgumentError, "invalid value for 'to' when calling InsightApi.get_statistics_per_unit, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/bot/insight/message/event/aggregation'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customAggregationUnit'] = custom_aggregation_unit
      query_params[:'from'] = from
      query_params[:'to'] = to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatisticsPerUnitResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InsightApi.get_statistics_per_unit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightApi#get_statistics_per_unit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
