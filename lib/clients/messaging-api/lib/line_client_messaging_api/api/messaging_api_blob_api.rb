=begin
#LINE Messaging API

#This document describes LINE Messaging API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module LINE::Client::MessagingApi
  class MessagingApiBlobApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Download image, video, and audio data sent from users.
    # @param message_id [String] Message ID of video or audio
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_message_content(message_id, opts = {})
      data, _status_code, _headers = get_message_content_with_http_info(message_id, opts)
      data
    end

    # Download image, video, and audio data sent from users.
    # @param message_id [String] Message ID of video or audio
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_message_content_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiBlobApi.get_message_content ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessagingApiBlobApi.get_message_content"
      end
      # resource path
      local_var_path = '/v2/bot/message/{messageId}/content'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiBlobApi.get_message_content",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiBlobApi#get_message_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a preview image of the image or video
    # @param message_id [String] Message ID of image or video
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_message_content_preview(message_id, opts = {})
      data, _status_code, _headers = get_message_content_preview_with_http_info(message_id, opts)
      data
    end

    # Get a preview image of the image or video
    # @param message_id [String] Message ID of image or video
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_message_content_preview_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiBlobApi.get_message_content_preview ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessagingApiBlobApi.get_message_content_preview"
      end
      # resource path
      local_var_path = '/v2/bot/message/{messageId}/content/preview'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiBlobApi.get_message_content_preview",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiBlobApi#get_message_content_preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify the preparation status of a video or audio for getting
    # @param message_id [String] Message ID of video or audio
    # @param [Hash] opts the optional parameters
    # @return [GetMessageContentTranscodingResponse]
    def get_message_content_transcoding_by_message_id(message_id, opts = {})
      data, _status_code, _headers = get_message_content_transcoding_by_message_id_with_http_info(message_id, opts)
      data
    end

    # Verify the preparation status of a video or audio for getting
    # @param message_id [String] Message ID of video or audio
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMessageContentTranscodingResponse, Integer, Hash)>] GetMessageContentTranscodingResponse data, response status code and response headers
    def get_message_content_transcoding_by_message_id_with_http_info(message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiBlobApi.get_message_content_transcoding_by_message_id ...'
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessagingApiBlobApi.get_message_content_transcoding_by_message_id"
      end
      # resource path
      local_var_path = '/v2/bot/message/{messageId}/content/transcoding'.sub('{' + 'messageId' + '}', CGI.escape(message_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMessageContentTranscodingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiBlobApi.get_message_content_transcoding_by_message_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiBlobApi#get_message_content_transcoding_by_message_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download rich menu image.
    # @param rich_menu_id [String] ID of the rich menu with the image to be downloaded
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_rich_menu_image(rich_menu_id, opts = {})
      data, _status_code, _headers = get_rich_menu_image_with_http_info(rich_menu_id, opts)
      data
    end

    # Download rich menu image.
    # @param rich_menu_id [String] ID of the rich menu with the image to be downloaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_rich_menu_image_with_http_info(rich_menu_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiBlobApi.get_rich_menu_image ...'
      end
      # verify the required parameter 'rich_menu_id' is set
      if @api_client.config.client_side_validation && rich_menu_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_id' when calling MessagingApiBlobApi.get_rich_menu_image"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/{richMenuId}/content'.sub('{' + 'richMenuId' + '}', CGI.escape(rich_menu_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiBlobApi.get_rich_menu_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiBlobApi#get_rich_menu_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload rich menu image
    # @param rich_menu_id [String] The ID of the rich menu to attach the image to
    # @param [Hash] opts the optional parameters
    # @option opts [File] :body 
    # @return [nil]
    def set_rich_menu_image(rich_menu_id, opts = {})
      set_rich_menu_image_with_http_info(rich_menu_id, opts)
      nil
    end

    # Upload rich menu image
    # @param rich_menu_id [String] The ID of the rich menu to attach the image to
    # @param [Hash] opts the optional parameters
    # @option opts [File] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_rich_menu_image_with_http_info(rich_menu_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiBlobApi.set_rich_menu_image ...'
      end
      # verify the required parameter 'rich_menu_id' is set
      if @api_client.config.client_side_validation && rich_menu_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_id' when calling MessagingApiBlobApi.set_rich_menu_image"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/{richMenuId}/content'.sub('{' + 'richMenuId' + '}', CGI.escape(rich_menu_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiBlobApi.set_rich_menu_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiBlobApi#set_rich_menu_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
