=begin
#LINE Messaging API

#This document describes LINE Messaging API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0

=end

require 'cgi'

module LINE::Client::MessagingApi
  class MessagingApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Send a message using phone number
    # @param audience_match_messages_request [AudienceMatchMessagesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def audience_match(audience_match_messages_request, opts = {})
      audience_match_with_http_info(audience_match_messages_request, opts)
      nil
    end

    # Send a message using phone number
    # @param audience_match_messages_request [AudienceMatchMessagesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def audience_match_with_http_info(audience_match_messages_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.audience_match ...'
      end
      # verify the required parameter 'audience_match_messages_request' is set
      if @api_client.config.client_side_validation && audience_match_messages_request.nil?
        fail ArgumentError, "Missing the required parameter 'audience_match_messages_request' when calling MessagingApiApi.audience_match"
      end
      # resource path
      local_var_path = '/bot/ad/multicast/phone'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(audience_match_messages_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.audience_match",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#audience_match\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends a message to multiple users at any time.
    # @param broadcast_request [BroadcastRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [Object]
    def broadcast(broadcast_request, opts = {})
      data, _status_code, _headers = broadcast_with_http_info(broadcast_request, opts)
      data
    end

    # Sends a message to multiple users at any time.
    # @param broadcast_request [BroadcastRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def broadcast_with_http_info(broadcast_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.broadcast ...'
      end
      # verify the required parameter 'broadcast_request' is set
      if @api_client.config.client_side_validation && broadcast_request.nil?
        fail ArgumentError, "Missing the required parameter 'broadcast_request' when calling MessagingApiApi.broadcast"
      end
      # resource path
      local_var_path = '/v2/bot/message/broadcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Line-Retry-Key'] = opts[:'x_line_retry_key'] if !opts[:'x_line_retry_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(broadcast_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.broadcast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel default rich menu
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_default_rich_menu(opts = {})
      cancel_default_rich_menu_with_http_info(opts)
      nil
    end

    # Cancel default rich menu
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_default_rich_menu_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.cancel_default_rich_menu ...'
      end
      # resource path
      local_var_path = '/v2/bot/user/all/richmenu'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.cancel_default_rich_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#cancel_default_rich_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create rich menu
    # @param rich_menu_request [RichMenuRequest] 
    # @param [Hash] opts the optional parameters
    # @return [RichMenuIdResponse]
    def create_rich_menu(rich_menu_request, opts = {})
      data, _status_code, _headers = create_rich_menu_with_http_info(rich_menu_request, opts)
      data
    end

    # Create rich menu
    # @param rich_menu_request [RichMenuRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuIdResponse, Integer, Hash)>] RichMenuIdResponse data, response status code and response headers
    def create_rich_menu_with_http_info(rich_menu_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.create_rich_menu ...'
      end
      # verify the required parameter 'rich_menu_request' is set
      if @api_client.config.client_side_validation && rich_menu_request.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_request' when calling MessagingApiApi.create_rich_menu"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rich_menu_request)

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuIdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.create_rich_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#create_rich_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create rich menu alias
    # @param create_rich_menu_alias_request [CreateRichMenuAliasRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_rich_menu_alias(create_rich_menu_alias_request, opts = {})
      create_rich_menu_alias_with_http_info(create_rich_menu_alias_request, opts)
      nil
    end

    # Create rich menu alias
    # @param create_rich_menu_alias_request [CreateRichMenuAliasRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_rich_menu_alias_with_http_info(create_rich_menu_alias_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.create_rich_menu_alias ...'
      end
      # verify the required parameter 'create_rich_menu_alias_request' is set
      if @api_client.config.client_side_validation && create_rich_menu_alias_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_rich_menu_alias_request' when calling MessagingApiApi.create_rich_menu_alias"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/alias'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_rich_menu_alias_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.create_rich_menu_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#create_rich_menu_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a rich menu.
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_rich_menu(rich_menu_id, opts = {})
      delete_rich_menu_with_http_info(rich_menu_id, opts)
      nil
    end

    # Deletes a rich menu.
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_rich_menu_with_http_info(rich_menu_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.delete_rich_menu ...'
      end
      # verify the required parameter 'rich_menu_id' is set
      if @api_client.config.client_side_validation && rich_menu_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_id' when calling MessagingApiApi.delete_rich_menu"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/{richMenuId}'.sub('{' + 'richMenuId' + '}', CGI.escape(rich_menu_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.delete_rich_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#delete_rich_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete rich menu alias
    # @param rich_menu_alias_id [String] Rich menu alias ID that you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_rich_menu_alias(rich_menu_alias_id, opts = {})
      delete_rich_menu_alias_with_http_info(rich_menu_alias_id, opts)
      nil
    end

    # Delete rich menu alias
    # @param rich_menu_alias_id [String] Rich menu alias ID that you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_rich_menu_alias_with_http_info(rich_menu_alias_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.delete_rich_menu_alias ...'
      end
      # verify the required parameter 'rich_menu_alias_id' is set
      if @api_client.config.client_side_validation && rich_menu_alias_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_alias_id' when calling MessagingApiApi.delete_rich_menu_alias"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/alias/{richMenuAliasId}'.sub('{' + 'richMenuAliasId' + '}', CGI.escape(rich_menu_alias_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.delete_rich_menu_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#delete_rich_menu_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get result of message delivery using phone number
    # @param date [String] Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20190831&#x60;) Time Zone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [NumberOfMessagesResponse]
    def get_ad_phone_message_statistics(date, opts = {})
      data, _status_code, _headers = get_ad_phone_message_statistics_with_http_info(date, opts)
      data
    end

    # Get result of message delivery using phone number
    # @param date [String] Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20190831&#x60;) Time Zone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NumberOfMessagesResponse, Integer, Hash)>] NumberOfMessagesResponse data, response status code and response headers
    def get_ad_phone_message_statistics_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_ad_phone_message_statistics ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling MessagingApiApi.get_ad_phone_message_statistics"
      end
      # resource path
      local_var_path = '/v2/bot/message/delivery/ad_phone'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NumberOfMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_ad_phone_message_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_ad_phone_message_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get name list of units used this month
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The maximum number of aggregation units you can get per request. 
    # @option opts [String] :start Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array. 
    # @return [GetAggregationUnitNameListResponse]
    def get_aggregation_unit_name_list(opts = {})
      data, _status_code, _headers = get_aggregation_unit_name_list_with_http_info(opts)
      data
    end

    # Get name list of units used this month
    # @param [Hash] opts the optional parameters
    # @option opts [String] :limit The maximum number of aggregation units you can get per request. 
    # @option opts [String] :start Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array. 
    # @return [Array<(GetAggregationUnitNameListResponse, Integer, Hash)>] GetAggregationUnitNameListResponse data, response status code and response headers
    def get_aggregation_unit_name_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_aggregation_unit_name_list ...'
      end
      # resource path
      local_var_path = '/v2/bot/message/aggregation/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAggregationUnitNameListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_aggregation_unit_name_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_aggregation_unit_name_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of units used this month
    # @param [Hash] opts the optional parameters
    # @return [GetAggregationUnitUsageResponse]
    def get_aggregation_unit_usage(opts = {})
      data, _status_code, _headers = get_aggregation_unit_usage_with_http_info(opts)
      data
    end

    # Get number of units used this month
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAggregationUnitUsageResponse, Integer, Hash)>] GetAggregationUnitUsageResponse data, response status code and response headers
    def get_aggregation_unit_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_aggregation_unit_usage ...'
      end
      # resource path
      local_var_path = '/v2/bot/message/aggregation/info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAggregationUnitUsageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_aggregation_unit_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_aggregation_unit_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get bot info
    # @param [Hash] opts the optional parameters
    # @return [BotInfoResponse]
    def get_bot_info(opts = {})
      data, _status_code, _headers = get_bot_info_with_http_info(opts)
      data
    end

    # Get bot info
    # @param [Hash] opts the optional parameters
    # @return [Array<(BotInfoResponse, Integer, Hash)>] BotInfoResponse data, response status code and response headers
    def get_bot_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_bot_info ...'
      end
      # resource path
      local_var_path = '/v2/bot/info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BotInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_bot_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_bot_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the ID of the default rich menu set with the Messaging API.
    # @param [Hash] opts the optional parameters
    # @return [RichMenuIdResponse]
    def get_default_rich_menu_id(opts = {})
      data, _status_code, _headers = get_default_rich_menu_id_with_http_info(opts)
      data
    end

    # Gets the ID of the default rich menu set with the Messaging API.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuIdResponse, Integer, Hash)>] RichMenuIdResponse data, response status code and response headers
    def get_default_rich_menu_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_default_rich_menu_id ...'
      end
      # resource path
      local_var_path = '/v2/bot/user/all/richmenu'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuIdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_default_rich_menu_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_default_rich_menu_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of users who added your LINE Official Account as a friend
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs. 
    # @option opts [Integer] :limit The maximum number of user IDs to retrieve in a single request. (default to 300)
    # @return [GetFollowersResponse]
    def get_followers(opts = {})
      data, _status_code, _headers = get_followers_with_http_info(opts)
      data
    end

    # Get a list of users who added your LINE Official Account as a friend
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs. 
    # @option opts [Integer] :limit The maximum number of user IDs to retrieve in a single request. (default to 300)
    # @return [Array<(GetFollowersResponse, Integer, Hash)>] GetFollowersResponse data, response status code and response headers
    def get_followers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_followers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling MessagingApiApi.get_followers, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/v2/bot/followers/ids'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFollowersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of users in a group chat
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [GroupMemberCountResponse]
    def get_group_member_count(group_id, opts = {})
      data, _status_code, _headers = get_group_member_count_with_http_info(group_id, opts)
      data
    end

    # Get number of users in a group chat
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupMemberCountResponse, Integer, Hash)>] GroupMemberCountResponse data, response status code and response headers
    def get_group_member_count_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_group_member_count ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MessagingApiApi.get_group_member_count"
      end
      # resource path
      local_var_path = '/v2/bot/group/{groupId}/members/count'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupMemberCountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_group_member_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_group_member_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get group chat member profile
    # @param group_id [String] Group ID
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [GroupUserProfileResponse]
    def get_group_member_profile(group_id, user_id, opts = {})
      data, _status_code, _headers = get_group_member_profile_with_http_info(group_id, user_id, opts)
      data
    end

    # Get group chat member profile
    # @param group_id [String] Group ID
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupUserProfileResponse, Integer, Hash)>] GroupUserProfileResponse data, response status code and response headers
    def get_group_member_profile_with_http_info(group_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_group_member_profile ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MessagingApiApi.get_group_member_profile"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MessagingApiApi.get_group_member_profile"
      end
      # resource path
      local_var_path = '/v2/bot/group/{groupId}/member/{userId}'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupUserProfileResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_group_member_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_group_member_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get group chat member user IDs
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
    # @return [MembersIdsResponse]
    def get_group_members_ids(group_id, opts = {})
      data, _status_code, _headers = get_group_members_ids_with_http_info(group_id, opts)
      data
    end

    # Get group chat member user IDs
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
    # @return [Array<(MembersIdsResponse, Integer, Hash)>] MembersIdsResponse data, response status code and response headers
    def get_group_members_ids_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_group_members_ids ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MessagingApiApi.get_group_members_ids"
      end
      # resource path
      local_var_path = '/v2/bot/group/{groupId}/members/ids'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersIdsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_group_members_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_group_members_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get group chat summary
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [GroupSummaryResponse]
    def get_group_summary(group_id, opts = {})
      data, _status_code, _headers = get_group_summary_with_http_info(group_id, opts)
      data
    end

    # Get group chat summary
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupSummaryResponse, Integer, Hash)>] GroupSummaryResponse data, response status code and response headers
    def get_group_summary_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_group_summary ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MessagingApiApi.get_group_summary"
      end
      # resource path
      local_var_path = '/v2/bot/group/{groupId}/summary'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupSummaryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_group_summary",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_group_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
    # @param [Hash] opts the optional parameters
    # @return [MessageQuotaResponse]
    def get_message_quota(opts = {})
      data, _status_code, _headers = get_message_quota_with_http_info(opts)
      data
    end

    # Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageQuotaResponse, Integer, Hash)>] MessageQuotaResponse data, response status code and response headers
    def get_message_quota_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_message_quota ...'
      end
      # resource path
      local_var_path = '/v2/bot/message/quota'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageQuotaResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_message_quota",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_message_quota\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the number of messages sent in the current month.
    # @param [Hash] opts the optional parameters
    # @return [QuotaConsumptionResponse]
    def get_message_quota_consumption(opts = {})
      data, _status_code, _headers = get_message_quota_consumption_with_http_info(opts)
      data
    end

    # Gets the number of messages sent in the current month.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuotaConsumptionResponse, Integer, Hash)>] QuotaConsumptionResponse data, response status code and response headers
    def get_message_quota_consumption_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_message_quota_consumption ...'
      end
      # resource path
      local_var_path = '/v2/bot/message/quota/consumption'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuotaConsumptionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_message_quota_consumption",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_message_quota_consumption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the status of a narrowcast message.
    # @param request_id [String] The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.
    # @param [Hash] opts the optional parameters
    # @return [NarrowcastProgressResponse]
    def get_narrowcast_progress(request_id, opts = {})
      data, _status_code, _headers = get_narrowcast_progress_with_http_info(request_id, opts)
      data
    end

    # Gets the status of a narrowcast message.
    # @param request_id [String] The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NarrowcastProgressResponse, Integer, Hash)>] NarrowcastProgressResponse data, response status code and response headers
    def get_narrowcast_progress_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_narrowcast_progress ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling MessagingApiApi.get_narrowcast_progress"
      end
      # resource path
      local_var_path = '/v2/bot/message/progress/narrowcast'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'requestId'] = request_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NarrowcastProgressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_narrowcast_progress",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_narrowcast_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of sent broadcast messages
    # @param date [String] Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [NumberOfMessagesResponse]
    def get_number_of_sent_broadcast_messages(date, opts = {})
      data, _status_code, _headers = get_number_of_sent_broadcast_messages_with_http_info(date, opts)
      data
    end

    # Get number of sent broadcast messages
    # @param date [String] Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NumberOfMessagesResponse, Integer, Hash)>] NumberOfMessagesResponse data, response status code and response headers
    def get_number_of_sent_broadcast_messages_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_number_of_sent_broadcast_messages ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling MessagingApiApi.get_number_of_sent_broadcast_messages"
      end
      # resource path
      local_var_path = '/v2/bot/message/delivery/broadcast'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NumberOfMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_number_of_sent_broadcast_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_number_of_sent_broadcast_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of sent multicast messages
    # @param date [String] Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [NumberOfMessagesResponse]
    def get_number_of_sent_multicast_messages(date, opts = {})
      data, _status_code, _headers = get_number_of_sent_multicast_messages_with_http_info(date, opts)
      data
    end

    # Get number of sent multicast messages
    # @param date [String] Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NumberOfMessagesResponse, Integer, Hash)>] NumberOfMessagesResponse data, response status code and response headers
    def get_number_of_sent_multicast_messages_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_number_of_sent_multicast_messages ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling MessagingApiApi.get_number_of_sent_multicast_messages"
      end
      # resource path
      local_var_path = '/v2/bot/message/delivery/multicast'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NumberOfMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_number_of_sent_multicast_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_number_of_sent_multicast_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of sent push messages
    # @param date [String] Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [NumberOfMessagesResponse]
    def get_number_of_sent_push_messages(date, opts = {})
      data, _status_code, _headers = get_number_of_sent_push_messages_with_http_info(date, opts)
      data
    end

    # Get number of sent push messages
    # @param date [String] Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NumberOfMessagesResponse, Integer, Hash)>] NumberOfMessagesResponse data, response status code and response headers
    def get_number_of_sent_push_messages_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_number_of_sent_push_messages ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling MessagingApiApi.get_number_of_sent_push_messages"
      end
      # resource path
      local_var_path = '/v2/bot/message/delivery/push'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NumberOfMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_number_of_sent_push_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_number_of_sent_push_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of sent reply messages
    # @param date [String] Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [NumberOfMessagesResponse]
    def get_number_of_sent_reply_messages(date, opts = {})
      data, _status_code, _headers = get_number_of_sent_reply_messages_with_http_info(date, opts)
      data
    end

    # Get number of sent reply messages
    # @param date [String] Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NumberOfMessagesResponse, Integer, Hash)>] NumberOfMessagesResponse data, response status code and response headers
    def get_number_of_sent_reply_messages_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_number_of_sent_reply_messages ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling MessagingApiApi.get_number_of_sent_reply_messages"
      end
      # resource path
      local_var_path = '/v2/bot/message/delivery/reply'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NumberOfMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_number_of_sent_reply_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_number_of_sent_reply_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of sent LINE notification messages　
    # @param date [String] Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [NumberOfMessagesResponse]
    def get_pnp_message_statistics(date, opts = {})
      data, _status_code, _headers = get_pnp_message_statistics_with_http_info(date, opts)
      data
    end

    # Get number of sent LINE notification messages　
    # @param date [String] Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NumberOfMessagesResponse, Integer, Hash)>] NumberOfMessagesResponse data, response status code and response headers
    def get_pnp_message_statistics_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_pnp_message_statistics ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling MessagingApiApi.get_pnp_message_statistics"
      end
      pattern = Regexp.new(/^[0-9]{8}$/)
      if @api_client.config.client_side_validation && date !~ pattern
        fail ArgumentError, "invalid value for 'date' when calling MessagingApiApi.get_pnp_message_statistics, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/bot/message/delivery/pnp'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NumberOfMessagesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_pnp_message_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_pnp_message_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get profile
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [UserProfileResponse]
    def get_profile(user_id, opts = {})
      data, _status_code, _headers = get_profile_with_http_info(user_id, opts)
      data
    end

    # Get profile
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserProfileResponse, Integer, Hash)>] UserProfileResponse data, response status code and response headers
    def get_profile_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_profile ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MessagingApiApi.get_profile"
      end
      # resource path
      local_var_path = '/v2/bot/profile/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserProfileResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a rich menu via a rich menu ID.
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [RichMenuResponse]
    def get_rich_menu(rich_menu_id, opts = {})
      data, _status_code, _headers = get_rich_menu_with_http_info(rich_menu_id, opts)
      data
    end

    # Gets a rich menu via a rich menu ID.
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuResponse, Integer, Hash)>] RichMenuResponse data, response status code and response headers
    def get_rich_menu_with_http_info(rich_menu_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_rich_menu ...'
      end
      # verify the required parameter 'rich_menu_id' is set
      if @api_client.config.client_side_validation && rich_menu_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_id' when calling MessagingApiApi.get_rich_menu"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/{richMenuId}'.sub('{' + 'richMenuId' + '}', CGI.escape(rich_menu_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_rich_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_rich_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rich menu alias information
    # @param rich_menu_alias_id [String] The rich menu alias ID whose information you want to obtain.
    # @param [Hash] opts the optional parameters
    # @return [RichMenuAliasResponse]
    def get_rich_menu_alias(rich_menu_alias_id, opts = {})
      data, _status_code, _headers = get_rich_menu_alias_with_http_info(rich_menu_alias_id, opts)
      data
    end

    # Get rich menu alias information
    # @param rich_menu_alias_id [String] The rich menu alias ID whose information you want to obtain.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuAliasResponse, Integer, Hash)>] RichMenuAliasResponse data, response status code and response headers
    def get_rich_menu_alias_with_http_info(rich_menu_alias_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_rich_menu_alias ...'
      end
      # verify the required parameter 'rich_menu_alias_id' is set
      if @api_client.config.client_side_validation && rich_menu_alias_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_alias_id' when calling MessagingApiApi.get_rich_menu_alias"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/alias/{richMenuAliasId}'.sub('{' + 'richMenuAliasId' + '}', CGI.escape(rich_menu_alias_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuAliasResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_rich_menu_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_rich_menu_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of rich menu alias
    # @param [Hash] opts the optional parameters
    # @return [RichMenuAliasListResponse]
    def get_rich_menu_alias_list(opts = {})
      data, _status_code, _headers = get_rich_menu_alias_list_with_http_info(opts)
      data
    end

    # Get list of rich menu alias
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuAliasListResponse, Integer, Hash)>] RichMenuAliasListResponse data, response status code and response headers
    def get_rich_menu_alias_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_rich_menu_alias_list ...'
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/alias/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuAliasListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_rich_menu_alias_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_rich_menu_alias_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the status of Replace or unlink a linked rich menus in batches.
    # @param request_id [String] A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
    # @param [Hash] opts the optional parameters
    # @return [RichMenuBatchProgressResponse]
    def get_rich_menu_batch_progress(request_id, opts = {})
      data, _status_code, _headers = get_rich_menu_batch_progress_with_http_info(request_id, opts)
      data
    end

    # Get the status of Replace or unlink a linked rich menus in batches.
    # @param request_id [String] A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuBatchProgressResponse, Integer, Hash)>] RichMenuBatchProgressResponse data, response status code and response headers
    def get_rich_menu_batch_progress_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_rich_menu_batch_progress ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling MessagingApiApi.get_rich_menu_batch_progress"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/progress/batch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'requestId'] = request_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuBatchProgressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_rich_menu_batch_progress",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_rich_menu_batch_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rich menu ID of user
    # @param user_id [String] User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.
    # @param [Hash] opts the optional parameters
    # @return [RichMenuIdResponse]
    def get_rich_menu_id_of_user(user_id, opts = {})
      data, _status_code, _headers = get_rich_menu_id_of_user_with_http_info(user_id, opts)
      data
    end

    # Get rich menu ID of user
    # @param user_id [String] User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuIdResponse, Integer, Hash)>] RichMenuIdResponse data, response status code and response headers
    def get_rich_menu_id_of_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_rich_menu_id_of_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MessagingApiApi.get_rich_menu_id_of_user"
      end
      # resource path
      local_var_path = '/v2/bot/user/{userId}/richmenu'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuIdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_rich_menu_id_of_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_rich_menu_id_of_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rich menu list
    # @param [Hash] opts the optional parameters
    # @return [RichMenuListResponse]
    def get_rich_menu_list(opts = {})
      data, _status_code, _headers = get_rich_menu_list_with_http_info(opts)
      data
    end

    # Get rich menu list
    # @param [Hash] opts the optional parameters
    # @return [Array<(RichMenuListResponse, Integer, Hash)>] RichMenuListResponse data, response status code and response headers
    def get_rich_menu_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_rich_menu_list ...'
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RichMenuListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_rich_menu_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_rich_menu_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of users in a multi-person chat
    # @param room_id [String] Room ID
    # @param [Hash] opts the optional parameters
    # @return [RoomMemberCountResponse]
    def get_room_member_count(room_id, opts = {})
      data, _status_code, _headers = get_room_member_count_with_http_info(room_id, opts)
      data
    end

    # Get number of users in a multi-person chat
    # @param room_id [String] Room ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoomMemberCountResponse, Integer, Hash)>] RoomMemberCountResponse data, response status code and response headers
    def get_room_member_count_with_http_info(room_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_room_member_count ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling MessagingApiApi.get_room_member_count"
      end
      # resource path
      local_var_path = '/v2/bot/room/{roomId}/members/count'.sub('{' + 'roomId' + '}', CGI.escape(room_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoomMemberCountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_room_member_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_room_member_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get multi-person chat member profile
    # @param room_id [String] Room ID
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [RoomUserProfileResponse]
    def get_room_member_profile(room_id, user_id, opts = {})
      data, _status_code, _headers = get_room_member_profile_with_http_info(room_id, user_id, opts)
      data
    end

    # Get multi-person chat member profile
    # @param room_id [String] Room ID
    # @param user_id [String] User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoomUserProfileResponse, Integer, Hash)>] RoomUserProfileResponse data, response status code and response headers
    def get_room_member_profile_with_http_info(room_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_room_member_profile ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling MessagingApiApi.get_room_member_profile"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MessagingApiApi.get_room_member_profile"
      end
      # resource path
      local_var_path = '/v2/bot/room/{roomId}/member/{userId}'.sub('{' + 'roomId' + '}', CGI.escape(room_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RoomUserProfileResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_room_member_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_room_member_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get multi-person chat member user IDs
    # @param room_id [String] Room ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
    # @return [MembersIdsResponse]
    def get_room_members_ids(room_id, opts = {})
      data, _status_code, _headers = get_room_members_ids_with_http_info(room_id, opts)
      data
    end

    # Get multi-person chat member user IDs
    # @param room_id [String] Room ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group. 
    # @return [Array<(MembersIdsResponse, Integer, Hash)>] MembersIdsResponse data, response status code and response headers
    def get_room_members_ids_with_http_info(room_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_room_members_ids ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling MessagingApiApi.get_room_members_ids"
      end
      # resource path
      local_var_path = '/v2/bot/room/{roomId}/members/ids'.sub('{' + 'roomId' + '}', CGI.escape(room_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MembersIdsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_room_members_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_room_members_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get webhook endpoint information
    # @param [Hash] opts the optional parameters
    # @return [GetWebhookEndpointResponse]
    def get_webhook_endpoint(opts = {})
      data, _status_code, _headers = get_webhook_endpoint_with_http_info(opts)
      data
    end

    # Get webhook endpoint information
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetWebhookEndpointResponse, Integer, Hash)>] GetWebhookEndpointResponse data, response status code and response headers
    def get_webhook_endpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.get_webhook_endpoint ...'
      end
      # resource path
      local_var_path = '/v2/bot/channel/webhook/endpoint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetWebhookEndpointResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.get_webhook_endpoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#get_webhook_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue link token
    # @param user_id [String] User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. 
    # @param [Hash] opts the optional parameters
    # @return [IssueLinkTokenResponse]
    def issue_link_token(user_id, opts = {})
      data, _status_code, _headers = issue_link_token_with_http_info(user_id, opts)
      data
    end

    # Issue link token
    # @param user_id [String] User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IssueLinkTokenResponse, Integer, Hash)>] IssueLinkTokenResponse data, response status code and response headers
    def issue_link_token_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.issue_link_token ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MessagingApiApi.issue_link_token"
      end
      # resource path
      local_var_path = '/v2/bot/user/{userId}/linkToken'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueLinkTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.issue_link_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#issue_link_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Leave group chat
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def leave_group(group_id, opts = {})
      leave_group_with_http_info(group_id, opts)
      nil
    end

    # Leave group chat
    # @param group_id [String] Group ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def leave_group_with_http_info(group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.leave_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling MessagingApiApi.leave_group"
      end
      # resource path
      local_var_path = '/v2/bot/group/{groupId}/leave'.sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.leave_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#leave_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Leave multi-person chat
    # @param room_id [String] Room ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def leave_room(room_id, opts = {})
      leave_room_with_http_info(room_id, opts)
      nil
    end

    # Leave multi-person chat
    # @param room_id [String] Room ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def leave_room_with_http_info(room_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.leave_room ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling MessagingApiApi.leave_room"
      end
      # resource path
      local_var_path = '/v2/bot/room/{roomId}/leave'.sub('{' + 'roomId' + '}', CGI.escape(room_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.leave_room",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#leave_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Link rich menu to user.
    # @param user_id [String] User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def link_rich_menu_id_to_user(user_id, rich_menu_id, opts = {})
      link_rich_menu_id_to_user_with_http_info(user_id, rich_menu_id, opts)
      nil
    end

    # Link rich menu to user.
    # @param user_id [String] User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def link_rich_menu_id_to_user_with_http_info(user_id, rich_menu_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.link_rich_menu_id_to_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MessagingApiApi.link_rich_menu_id_to_user"
      end
      # verify the required parameter 'rich_menu_id' is set
      if @api_client.config.client_side_validation && rich_menu_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_id' when calling MessagingApiApi.link_rich_menu_id_to_user"
      end
      # resource path
      local_var_path = '/v2/bot/user/{userId}/richmenu/{richMenuId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'richMenuId' + '}', CGI.escape(rich_menu_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.link_rich_menu_id_to_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#link_rich_menu_id_to_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Link rich menu to multiple users
    # @param rich_menu_bulk_link_request [RichMenuBulkLinkRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def link_rich_menu_id_to_users(rich_menu_bulk_link_request, opts = {})
      link_rich_menu_id_to_users_with_http_info(rich_menu_bulk_link_request, opts)
      nil
    end

    # Link rich menu to multiple users
    # @param rich_menu_bulk_link_request [RichMenuBulkLinkRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def link_rich_menu_id_to_users_with_http_info(rich_menu_bulk_link_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.link_rich_menu_id_to_users ...'
      end
      # verify the required parameter 'rich_menu_bulk_link_request' is set
      if @api_client.config.client_side_validation && rich_menu_bulk_link_request.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_bulk_link_request' when calling MessagingApiApi.link_rich_menu_id_to_users"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/bulk/link'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rich_menu_bulk_link_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.link_rich_menu_id_to_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#link_rich_menu_id_to_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark messages from users as read
    # @param mark_messages_as_read_request [MarkMessagesAsReadRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mark_messages_as_read(mark_messages_as_read_request, opts = {})
      mark_messages_as_read_with_http_info(mark_messages_as_read_request, opts)
      nil
    end

    # Mark messages from users as read
    # @param mark_messages_as_read_request [MarkMessagesAsReadRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mark_messages_as_read_with_http_info(mark_messages_as_read_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.mark_messages_as_read ...'
      end
      # verify the required parameter 'mark_messages_as_read_request' is set
      if @api_client.config.client_side_validation && mark_messages_as_read_request.nil?
        fail ArgumentError, "Missing the required parameter 'mark_messages_as_read_request' when calling MessagingApiApi.mark_messages_as_read"
      end
      # resource path
      local_var_path = '/v2/bot/message/markAsRead'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mark_messages_as_read_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.mark_messages_as_read",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#mark_messages_as_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # An API that efficiently sends the same message to multiple user IDs. You can't send messages to group chats or multi-person chats.
    # @param multicast_request [MulticastRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [Object]
    def multicast(multicast_request, opts = {})
      data, _status_code, _headers = multicast_with_http_info(multicast_request, opts)
      data
    end

    # An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
    # @param multicast_request [MulticastRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def multicast_with_http_info(multicast_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.multicast ...'
      end
      # verify the required parameter 'multicast_request' is set
      if @api_client.config.client_side_validation && multicast_request.nil?
        fail ArgumentError, "Missing the required parameter 'multicast_request' when calling MessagingApiApi.multicast"
      end
      # resource path
      local_var_path = '/v2/bot/message/multicast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Line-Retry-Key'] = opts[:'x_line_retry_key'] if !opts[:'x_line_retry_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(multicast_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.multicast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#multicast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send narrowcast message
    # @param narrowcast_request [NarrowcastRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [Object]
    def narrowcast(narrowcast_request, opts = {})
      data, _status_code, _headers = narrowcast_with_http_info(narrowcast_request, opts)
      data
    end

    # Send narrowcast message
    # @param narrowcast_request [NarrowcastRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def narrowcast_with_http_info(narrowcast_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.narrowcast ...'
      end
      # verify the required parameter 'narrowcast_request' is set
      if @api_client.config.client_side_validation && narrowcast_request.nil?
        fail ArgumentError, "Missing the required parameter 'narrowcast_request' when calling MessagingApiApi.narrowcast"
      end
      # resource path
      local_var_path = '/v2/bot/message/narrowcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Line-Retry-Key'] = opts[:'x_line_retry_key'] if !opts[:'x_line_retry_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(narrowcast_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.narrowcast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#narrowcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends a message to a user, group chat, or multi-person chat at any time.
    # @param push_message_request [PushMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [PushMessageResponse]
    def push_message(push_message_request, opts = {})
      data, _status_code, _headers = push_message_with_http_info(push_message_request, opts)
      data
    end

    # Sends a message to a user, group chat, or multi-person chat at any time.
    # @param push_message_request [PushMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_retry_key Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key. 
    # @return [Array<(PushMessageResponse, Integer, Hash)>] PushMessageResponse data, response status code and response headers
    def push_message_with_http_info(push_message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.push_message ...'
      end
      # verify the required parameter 'push_message_request' is set
      if @api_client.config.client_side_validation && push_message_request.nil?
        fail ArgumentError, "Missing the required parameter 'push_message_request' when calling MessagingApiApi.push_message"
      end
      # resource path
      local_var_path = '/v2/bot/message/push'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Line-Retry-Key'] = opts[:'x_line_retry_key'] if !opts[:'x_line_retry_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(push_message_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PushMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.push_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#push_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send LINE notification message
    # @param pnp_messages_request [PnpMessagesRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_delivery_tag String returned in the delivery.data property of the delivery completion event via Webhook.
    # @return [nil]
    def push_messages_by_phone(pnp_messages_request, opts = {})
      push_messages_by_phone_with_http_info(pnp_messages_request, opts)
      nil
    end

    # Send LINE notification message
    # @param pnp_messages_request [PnpMessagesRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_line_delivery_tag String returned in the delivery.data property of the delivery completion event via Webhook.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def push_messages_by_phone_with_http_info(pnp_messages_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.push_messages_by_phone ...'
      end
      # verify the required parameter 'pnp_messages_request' is set
      if @api_client.config.client_side_validation && pnp_messages_request.nil?
        fail ArgumentError, "Missing the required parameter 'pnp_messages_request' when calling MessagingApiApi.push_messages_by_phone"
      end
      if @api_client.config.client_side_validation && !opts[:'x_line_delivery_tag'].nil? && opts[:'x_line_delivery_tag'].to_s.length > 100
        fail ArgumentError, 'invalid value for "opts[:"x_line_delivery_tag"]" when calling MessagingApiApi.push_messages_by_phone, the character length must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'x_line_delivery_tag'].nil? && opts[:'x_line_delivery_tag'].to_s.length < 16
        fail ArgumentError, 'invalid value for "opts[:"x_line_delivery_tag"]" when calling MessagingApiApi.push_messages_by_phone, the character length must be great than or equal to 16.'
      end

      # resource path
      local_var_path = '/bot/pnp/push'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Line-Delivery-Tag'] = opts[:'x_line_delivery_tag'] if !opts[:'x_line_delivery_tag'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pnp_messages_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.push_messages_by_phone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#push_messages_by_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send reply message
    # @param reply_message_request [ReplyMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ReplyMessageResponse]
    def reply_message(reply_message_request, opts = {})
      data, _status_code, _headers = reply_message_with_http_info(reply_message_request, opts)
      data
    end

    # Send reply message
    # @param reply_message_request [ReplyMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReplyMessageResponse, Integer, Hash)>] ReplyMessageResponse data, response status code and response headers
    def reply_message_with_http_info(reply_message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.reply_message ...'
      end
      # verify the required parameter 'reply_message_request' is set
      if @api_client.config.client_side_validation && reply_message_request.nil?
        fail ArgumentError, "Missing the required parameter 'reply_message_request' when calling MessagingApiApi.reply_message"
      end
      # resource path
      local_var_path = '/v2/bot/message/reply'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reply_message_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ReplyMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.reply_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#reply_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user.  The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
    # @param rich_menu_batch_request [RichMenuBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rich_menu_batch(rich_menu_batch_request, opts = {})
      rich_menu_batch_with_http_info(rich_menu_batch_request, opts)
      nil
    end

    # You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user.  The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
    # @param rich_menu_batch_request [RichMenuBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rich_menu_batch_with_http_info(rich_menu_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.rich_menu_batch ...'
      end
      # verify the required parameter 'rich_menu_batch_request' is set
      if @api_client.config.client_side_validation && rich_menu_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_batch_request' when calling MessagingApiApi.rich_menu_batch"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rich_menu_batch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.rich_menu_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#rich_menu_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set default rich menu
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_default_rich_menu(rich_menu_id, opts = {})
      set_default_rich_menu_with_http_info(rich_menu_id, opts)
      nil
    end

    # Set default rich menu
    # @param rich_menu_id [String] ID of a rich menu
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_default_rich_menu_with_http_info(rich_menu_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.set_default_rich_menu ...'
      end
      # verify the required parameter 'rich_menu_id' is set
      if @api_client.config.client_side_validation && rich_menu_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_id' when calling MessagingApiApi.set_default_rich_menu"
      end
      # resource path
      local_var_path = '/v2/bot/user/all/richmenu/{richMenuId}'.sub('{' + 'richMenuId' + '}', CGI.escape(rich_menu_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.set_default_rich_menu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#set_default_rich_menu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set webhook endpoint URL
    # @param set_webhook_endpoint_request [SetWebhookEndpointRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_webhook_endpoint(set_webhook_endpoint_request, opts = {})
      set_webhook_endpoint_with_http_info(set_webhook_endpoint_request, opts)
      nil
    end

    # Set webhook endpoint URL
    # @param set_webhook_endpoint_request [SetWebhookEndpointRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_webhook_endpoint_with_http_info(set_webhook_endpoint_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.set_webhook_endpoint ...'
      end
      # verify the required parameter 'set_webhook_endpoint_request' is set
      if @api_client.config.client_side_validation && set_webhook_endpoint_request.nil?
        fail ArgumentError, "Missing the required parameter 'set_webhook_endpoint_request' when calling MessagingApiApi.set_webhook_endpoint"
      end
      # resource path
      local_var_path = '/v2/bot/channel/webhook/endpoint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(set_webhook_endpoint_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.set_webhook_endpoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#set_webhook_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Test webhook endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [TestWebhookEndpointRequest] :test_webhook_endpoint_request 
    # @return [TestWebhookEndpointResponse]
    def test_webhook_endpoint(opts = {})
      data, _status_code, _headers = test_webhook_endpoint_with_http_info(opts)
      data
    end

    # Test webhook endpoint
    # @param [Hash] opts the optional parameters
    # @option opts [TestWebhookEndpointRequest] :test_webhook_endpoint_request 
    # @return [Array<(TestWebhookEndpointResponse, Integer, Hash)>] TestWebhookEndpointResponse data, response status code and response headers
    def test_webhook_endpoint_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.test_webhook_endpoint ...'
      end
      # resource path
      local_var_path = '/v2/bot/channel/webhook/test'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'test_webhook_endpoint_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TestWebhookEndpointResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.test_webhook_endpoint",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#test_webhook_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlink rich menu from user
    # @param user_id [String] User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unlink_rich_menu_id_from_user(user_id, opts = {})
      unlink_rich_menu_id_from_user_with_http_info(user_id, opts)
      nil
    end

    # Unlink rich menu from user
    # @param user_id [String] User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unlink_rich_menu_id_from_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.unlink_rich_menu_id_from_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling MessagingApiApi.unlink_rich_menu_id_from_user"
      end
      # resource path
      local_var_path = '/v2/bot/user/{userId}/richmenu'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.unlink_rich_menu_id_from_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#unlink_rich_menu_id_from_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlink rich menus from multiple users
    # @param rich_menu_bulk_unlink_request [RichMenuBulkUnlinkRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unlink_rich_menu_id_from_users(rich_menu_bulk_unlink_request, opts = {})
      unlink_rich_menu_id_from_users_with_http_info(rich_menu_bulk_unlink_request, opts)
      nil
    end

    # Unlink rich menus from multiple users
    # @param rich_menu_bulk_unlink_request [RichMenuBulkUnlinkRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unlink_rich_menu_id_from_users_with_http_info(rich_menu_bulk_unlink_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.unlink_rich_menu_id_from_users ...'
      end
      # verify the required parameter 'rich_menu_bulk_unlink_request' is set
      if @api_client.config.client_side_validation && rich_menu_bulk_unlink_request.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_bulk_unlink_request' when calling MessagingApiApi.unlink_rich_menu_id_from_users"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/bulk/unlink'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rich_menu_bulk_unlink_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.unlink_rich_menu_id_from_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#unlink_rich_menu_id_from_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update rich menu alias
    # @param rich_menu_alias_id [String] The rich menu alias ID you want to update.
    # @param update_rich_menu_alias_request [UpdateRichMenuAliasRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_rich_menu_alias(rich_menu_alias_id, update_rich_menu_alias_request, opts = {})
      update_rich_menu_alias_with_http_info(rich_menu_alias_id, update_rich_menu_alias_request, opts)
      nil
    end

    # Update rich menu alias
    # @param rich_menu_alias_id [String] The rich menu alias ID you want to update.
    # @param update_rich_menu_alias_request [UpdateRichMenuAliasRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_rich_menu_alias_with_http_info(rich_menu_alias_id, update_rich_menu_alias_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.update_rich_menu_alias ...'
      end
      # verify the required parameter 'rich_menu_alias_id' is set
      if @api_client.config.client_side_validation && rich_menu_alias_id.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_alias_id' when calling MessagingApiApi.update_rich_menu_alias"
      end
      # verify the required parameter 'update_rich_menu_alias_request' is set
      if @api_client.config.client_side_validation && update_rich_menu_alias_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_rich_menu_alias_request' when calling MessagingApiApi.update_rich_menu_alias"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/alias/{richMenuAliasId}'.sub('{' + 'richMenuAliasId' + '}', CGI.escape(rich_menu_alias_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_rich_menu_alias_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.update_rich_menu_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#update_rich_menu_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate message objects of a broadcast message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_broadcast(validate_message_request, opts = {})
      validate_broadcast_with_http_info(validate_message_request, opts)
      nil
    end

    # Validate message objects of a broadcast message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_broadcast_with_http_info(validate_message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.validate_broadcast ...'
      end
      # verify the required parameter 'validate_message_request' is set
      if @api_client.config.client_side_validation && validate_message_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_message_request' when calling MessagingApiApi.validate_broadcast"
      end
      # resource path
      local_var_path = '/v2/bot/message/validate/broadcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validate_message_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.validate_broadcast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#validate_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate message objects of a multicast message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_multicast(validate_message_request, opts = {})
      validate_multicast_with_http_info(validate_message_request, opts)
      nil
    end

    # Validate message objects of a multicast message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_multicast_with_http_info(validate_message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.validate_multicast ...'
      end
      # verify the required parameter 'validate_message_request' is set
      if @api_client.config.client_side_validation && validate_message_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_message_request' when calling MessagingApiApi.validate_multicast"
      end
      # resource path
      local_var_path = '/v2/bot/message/validate/multicast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validate_message_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.validate_multicast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#validate_multicast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate message objects of a narrowcast message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_narrowcast(validate_message_request, opts = {})
      validate_narrowcast_with_http_info(validate_message_request, opts)
      nil
    end

    # Validate message objects of a narrowcast message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_narrowcast_with_http_info(validate_message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.validate_narrowcast ...'
      end
      # verify the required parameter 'validate_message_request' is set
      if @api_client.config.client_side_validation && validate_message_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_message_request' when calling MessagingApiApi.validate_narrowcast"
      end
      # resource path
      local_var_path = '/v2/bot/message/validate/narrowcast'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validate_message_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.validate_narrowcast",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#validate_narrowcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate message objects of a push message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_push(validate_message_request, opts = {})
      validate_push_with_http_info(validate_message_request, opts)
      nil
    end

    # Validate message objects of a push message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_push_with_http_info(validate_message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.validate_push ...'
      end
      # verify the required parameter 'validate_message_request' is set
      if @api_client.config.client_side_validation && validate_message_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_message_request' when calling MessagingApiApi.validate_push"
      end
      # resource path
      local_var_path = '/v2/bot/message/validate/push'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validate_message_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.validate_push",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#validate_push\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate message objects of a reply message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_reply(validate_message_request, opts = {})
      validate_reply_with_http_info(validate_message_request, opts)
      nil
    end

    # Validate message objects of a reply message
    # @param validate_message_request [ValidateMessageRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_reply_with_http_info(validate_message_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.validate_reply ...'
      end
      # verify the required parameter 'validate_message_request' is set
      if @api_client.config.client_side_validation && validate_message_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_message_request' when calling MessagingApiApi.validate_reply"
      end
      # resource path
      local_var_path = '/v2/bot/message/validate/reply'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(validate_message_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.validate_reply",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#validate_reply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
    # @param rich_menu_batch_request [RichMenuBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_rich_menu_batch_request(rich_menu_batch_request, opts = {})
      validate_rich_menu_batch_request_with_http_info(rich_menu_batch_request, opts)
      nil
    end

    # Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
    # @param rich_menu_batch_request [RichMenuBatchRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_rich_menu_batch_request_with_http_info(rich_menu_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.validate_rich_menu_batch_request ...'
      end
      # verify the required parameter 'rich_menu_batch_request' is set
      if @api_client.config.client_side_validation && rich_menu_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_batch_request' when calling MessagingApiApi.validate_rich_menu_batch_request"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/validate/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rich_menu_batch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.validate_rich_menu_batch_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#validate_rich_menu_batch_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate rich menu object
    # @param rich_menu_request [RichMenuRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_rich_menu_object(rich_menu_request, opts = {})
      validate_rich_menu_object_with_http_info(rich_menu_request, opts)
      nil
    end

    # Validate rich menu object
    # @param rich_menu_request [RichMenuRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_rich_menu_object_with_http_info(rich_menu_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessagingApiApi.validate_rich_menu_object ...'
      end
      # verify the required parameter 'rich_menu_request' is set
      if @api_client.config.client_side_validation && rich_menu_request.nil?
        fail ArgumentError, "Missing the required parameter 'rich_menu_request' when calling MessagingApiApi.validate_rich_menu_object"
      end
      # resource path
      local_var_path = '/v2/bot/richmenu/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rich_menu_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MessagingApiApi.validate_rich_menu_object",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagingApiApi#validate_rich_menu_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
