=begin
#LINE Messaging API

#This document describes LINE Messaging API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module LINE::Client::MessagingApi
  class FlexBox < FlexComponent
    attr_accessor :layout

    attr_accessor :flex

    attr_accessor :contents

    attr_accessor :spacing

    attr_accessor :margin

    attr_accessor :position

    attr_accessor :offset_top

    attr_accessor :offset_bottom

    attr_accessor :offset_start

    attr_accessor :offset_end

    attr_accessor :background_color

    attr_accessor :border_color

    attr_accessor :border_width

    attr_accessor :corner_radius

    attr_accessor :width

    attr_accessor :max_width

    attr_accessor :height

    attr_accessor :max_height

    attr_accessor :padding_all

    attr_accessor :padding_top

    attr_accessor :padding_bottom

    attr_accessor :padding_start

    attr_accessor :padding_end

    attr_accessor :action

    attr_accessor :justify_content

    attr_accessor :align_items

    attr_accessor :background

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'layout' => :'layout',
        :'flex' => :'flex',
        :'contents' => :'contents',
        :'spacing' => :'spacing',
        :'margin' => :'margin',
        :'position' => :'position',
        :'offset_top' => :'offsetTop',
        :'offset_bottom' => :'offsetBottom',
        :'offset_start' => :'offsetStart',
        :'offset_end' => :'offsetEnd',
        :'background_color' => :'backgroundColor',
        :'border_color' => :'borderColor',
        :'border_width' => :'borderWidth',
        :'corner_radius' => :'cornerRadius',
        :'width' => :'width',
        :'max_width' => :'maxWidth',
        :'height' => :'height',
        :'max_height' => :'maxHeight',
        :'padding_all' => :'paddingAll',
        :'padding_top' => :'paddingTop',
        :'padding_bottom' => :'paddingBottom',
        :'padding_start' => :'paddingStart',
        :'padding_end' => :'paddingEnd',
        :'action' => :'action',
        :'justify_content' => :'justifyContent',
        :'align_items' => :'alignItems',
        :'background' => :'background'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'layout' => :'String',
        :'flex' => :'Integer',
        :'contents' => :'Array<FlexComponent>',
        :'spacing' => :'String',
        :'margin' => :'String',
        :'position' => :'String',
        :'offset_top' => :'String',
        :'offset_bottom' => :'String',
        :'offset_start' => :'String',
        :'offset_end' => :'String',
        :'background_color' => :'String',
        :'border_color' => :'String',
        :'border_width' => :'String',
        :'corner_radius' => :'String',
        :'width' => :'String',
        :'max_width' => :'String',
        :'height' => :'String',
        :'max_height' => :'String',
        :'padding_all' => :'String',
        :'padding_top' => :'String',
        :'padding_bottom' => :'String',
        :'padding_start' => :'String',
        :'padding_end' => :'String',
        :'action' => :'Action',
        :'justify_content' => :'String',
        :'align_items' => :'String',
        :'background' => :'FlexBoxBackground'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'FlexBoxAllOf',
      :'FlexComponent'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LINE::Client::MessagingApi::FlexBox` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LINE::Client::MessagingApi::FlexBox`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'layout')
        self.layout = attributes[:'layout']
      end

      if attributes.key?(:'flex')
        self.flex = attributes[:'flex']
      end

      if attributes.key?(:'contents')
        if (value = attributes[:'contents']).is_a?(Array)
          self.contents = value
        end
      end

      if attributes.key?(:'spacing')
        self.spacing = attributes[:'spacing']
      end

      if attributes.key?(:'margin')
        self.margin = attributes[:'margin']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'offset_top')
        self.offset_top = attributes[:'offset_top']
      end

      if attributes.key?(:'offset_bottom')
        self.offset_bottom = attributes[:'offset_bottom']
      end

      if attributes.key?(:'offset_start')
        self.offset_start = attributes[:'offset_start']
      end

      if attributes.key?(:'offset_end')
        self.offset_end = attributes[:'offset_end']
      end

      if attributes.key?(:'background_color')
        self.background_color = attributes[:'background_color']
      end

      if attributes.key?(:'border_color')
        self.border_color = attributes[:'border_color']
      end

      if attributes.key?(:'border_width')
        self.border_width = attributes[:'border_width']
      end

      if attributes.key?(:'corner_radius')
        self.corner_radius = attributes[:'corner_radius']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.key?(:'max_width')
        self.max_width = attributes[:'max_width']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'max_height')
        self.max_height = attributes[:'max_height']
      end

      if attributes.key?(:'padding_all')
        self.padding_all = attributes[:'padding_all']
      end

      if attributes.key?(:'padding_top')
        self.padding_top = attributes[:'padding_top']
      end

      if attributes.key?(:'padding_bottom')
        self.padding_bottom = attributes[:'padding_bottom']
      end

      if attributes.key?(:'padding_start')
        self.padding_start = attributes[:'padding_start']
      end

      if attributes.key?(:'padding_end')
        self.padding_end = attributes[:'padding_end']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'justify_content')
        self.justify_content = attributes[:'justify_content']
      end

      if attributes.key?(:'align_items')
        self.align_items = attributes[:'align_items']
      end

      if attributes.key?(:'background')
        self.background = attributes[:'background']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      layout_validator = EnumAttributeValidator.new('String', ["horizontal", "vertical", "baseline"])
      return false unless layout_validator.valid?(@layout)
      position_validator = EnumAttributeValidator.new('String', ["relative", "absolute"])
      return false unless position_validator.valid?(@position)
      justify_content_validator = EnumAttributeValidator.new('String', ["center", "flex-start", "flex-end", "space-between", "space-around", "space-evenly"])
      return false unless justify_content_validator.valid?(@justify_content)
      align_items_validator = EnumAttributeValidator.new('String', ["center", "flex-start", "flex-end"])
      return false unless align_items_validator.valid?(@align_items)
      true && super
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] layout Object to be assigned
    def layout=(layout)
      validator = EnumAttributeValidator.new('String', ["horizontal", "vertical", "baseline"])
      unless validator.valid?(layout)
        fail ArgumentError, "invalid value for \"layout\", must be one of #{validator.allowable_values}."
      end
      @layout = layout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] position Object to be assigned
    def position=(position)
      validator = EnumAttributeValidator.new('String', ["relative", "absolute"])
      unless validator.valid?(position)
        fail ArgumentError, "invalid value for \"position\", must be one of #{validator.allowable_values}."
      end
      @position = position
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] justify_content Object to be assigned
    def justify_content=(justify_content)
      validator = EnumAttributeValidator.new('String', ["center", "flex-start", "flex-end", "space-between", "space-around", "space-evenly"])
      unless validator.valid?(justify_content)
        fail ArgumentError, "invalid value for \"justify_content\", must be one of #{validator.allowable_values}."
      end
      @justify_content = justify_content
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] align_items Object to be assigned
    def align_items=(align_items)
      validator = EnumAttributeValidator.new('String', ["center", "flex-start", "flex-end"])
      unless validator.valid?(align_items)
        fail ArgumentError, "invalid value for \"align_items\", must be one of #{validator.allowable_values}."
      end
      @align_items = align_items
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          layout == o.layout &&
          flex == o.flex &&
          contents == o.contents &&
          spacing == o.spacing &&
          margin == o.margin &&
          position == o.position &&
          offset_top == o.offset_top &&
          offset_bottom == o.offset_bottom &&
          offset_start == o.offset_start &&
          offset_end == o.offset_end &&
          background_color == o.background_color &&
          border_color == o.border_color &&
          border_width == o.border_width &&
          corner_radius == o.corner_radius &&
          width == o.width &&
          max_width == o.max_width &&
          height == o.height &&
          max_height == o.max_height &&
          padding_all == o.padding_all &&
          padding_top == o.padding_top &&
          padding_bottom == o.padding_bottom &&
          padding_start == o.padding_start &&
          padding_end == o.padding_end &&
          action == o.action &&
          justify_content == o.justify_content &&
          align_items == o.align_items &&
          background == o.background && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [layout, flex, contents, spacing, margin, position, offset_top, offset_bottom, offset_start, offset_end, background_color, border_color, border_width, corner_radius, width, max_width, height, max_height, padding_all, padding_top, padding_bottom, padding_start, padding_end, action, justify_content, align_items, background].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LINE::Client::MessagingApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
