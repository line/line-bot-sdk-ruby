=begin
#LINE Messaging API

#This document describes LINE Messaging API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0

=end

require 'date'
require 'time'

module LINE::Client::MessagingApi
  class FlexButton < FlexComponent
    attr_accessor :flex

    attr_accessor :color

    attr_accessor :style

    attr_accessor :action

    attr_accessor :gravity

    attr_accessor :margin

    attr_accessor :position

    attr_accessor :offset_top

    attr_accessor :offset_bottom

    attr_accessor :offset_start

    attr_accessor :offset_end

    attr_accessor :height

    attr_accessor :adjust_mode

    attr_accessor :scaling

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'flex' => :'flex',
        :'color' => :'color',
        :'style' => :'style',
        :'action' => :'action',
        :'gravity' => :'gravity',
        :'margin' => :'margin',
        :'position' => :'position',
        :'offset_top' => :'offsetTop',
        :'offset_bottom' => :'offsetBottom',
        :'offset_start' => :'offsetStart',
        :'offset_end' => :'offsetEnd',
        :'height' => :'height',
        :'adjust_mode' => :'adjustMode',
        :'scaling' => :'scaling'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Returns the key-value map of all the JSON attributes this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attribute_map
      attribute_map.merge(superclass.acceptable_attribute_map)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'flex' => :'Integer',
        :'color' => :'String',
        :'style' => :'String',
        :'action' => :'Action',
        :'gravity' => :'String',
        :'margin' => :'String',
        :'position' => :'String',
        :'offset_top' => :'String',
        :'offset_bottom' => :'String',
        :'offset_start' => :'String',
        :'offset_end' => :'String',
        :'height' => :'String',
        :'adjust_mode' => :'String',
        :'scaling' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'FlexComponent'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LINE::Client::MessagingApi::FlexButton` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LINE::Client::MessagingApi::FlexButton`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'flex')
        self.flex = attributes[:'flex']
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'style')
        self.style = attributes[:'style']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'gravity')
        self.gravity = attributes[:'gravity']
      end

      if attributes.key?(:'margin')
        self.margin = attributes[:'margin']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'offset_top')
        self.offset_top = attributes[:'offset_top']
      end

      if attributes.key?(:'offset_bottom')
        self.offset_bottom = attributes[:'offset_bottom']
      end

      if attributes.key?(:'offset_start')
        self.offset_start = attributes[:'offset_start']
      end

      if attributes.key?(:'offset_end')
        self.offset_end = attributes[:'offset_end']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'adjust_mode')
        self.adjust_mode = attributes[:'adjust_mode']
      end

      if attributes.key?(:'scaling')
        self.scaling = attributes[:'scaling']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = super
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      style_validator = EnumAttributeValidator.new('String', ["primary", "secondary", "link"])
      return false unless style_validator.valid?(@style)
      gravity_validator = EnumAttributeValidator.new('String', ["top", "bottom", "center"])
      return false unless gravity_validator.valid?(@gravity)
      position_validator = EnumAttributeValidator.new('String', ["relative", "absolute"])
      return false unless position_validator.valid?(@position)
      height_validator = EnumAttributeValidator.new('String', ["md", "sm"])
      return false unless height_validator.valid?(@height)
      adjust_mode_validator = EnumAttributeValidator.new('String', ["shrink-to-fit"])
      return false unless adjust_mode_validator.valid?(@adjust_mode)
      true && super
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] style Object to be assigned
    def style=(style)
      validator = EnumAttributeValidator.new('String', ["primary", "secondary", "link"])
      unless validator.valid?(style)
        fail ArgumentError, "invalid value for \"style\", must be one of #{validator.allowable_values}."
      end
      @style = style
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gravity Object to be assigned
    def gravity=(gravity)
      validator = EnumAttributeValidator.new('String', ["top", "bottom", "center"])
      unless validator.valid?(gravity)
        fail ArgumentError, "invalid value for \"gravity\", must be one of #{validator.allowable_values}."
      end
      @gravity = gravity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] position Object to be assigned
    def position=(position)
      validator = EnumAttributeValidator.new('String', ["relative", "absolute"])
      unless validator.valid?(position)
        fail ArgumentError, "invalid value for \"position\", must be one of #{validator.allowable_values}."
      end
      @position = position
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] height Object to be assigned
    def height=(height)
      validator = EnumAttributeValidator.new('String', ["md", "sm"])
      unless validator.valid?(height)
        fail ArgumentError, "invalid value for \"height\", must be one of #{validator.allowable_values}."
      end
      @height = height
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adjust_mode Object to be assigned
    def adjust_mode=(adjust_mode)
      validator = EnumAttributeValidator.new('String', ["shrink-to-fit"])
      unless validator.valid?(adjust_mode)
        fail ArgumentError, "invalid value for \"adjust_mode\", must be one of #{validator.allowable_values}."
      end
      @adjust_mode = adjust_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          flex == o.flex &&
          color == o.color &&
          style == o.style &&
          action == o.action &&
          gravity == o.gravity &&
          margin == o.margin &&
          position == o.position &&
          offset_top == o.offset_top &&
          offset_bottom == o.offset_bottom &&
          offset_start == o.offset_start &&
          offset_end == o.offset_end &&
          height == o.height &&
          adjust_mode == o.adjust_mode &&
          scaling == o.scaling && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [flex, color, style, action, gravity, margin, position, offset_top, offset_bottom, offset_start, offset_end, height, adjust_mode, scaling].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LINE::Client::MessagingApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
