=begin
#LINE Messaging API

#This document describes LINE Messaging API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0

=end

require 'cgi'

module LINE::Client::Module
  class LineModuleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
    # @param chat_id [String] The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [AcquireChatControlRequest] :acquire_chat_control_request 
    # @return [nil]
    def acquire_chat_control(chat_id, opts = {})
      acquire_chat_control_with_http_info(chat_id, opts)
      nil
    end

    # If the Standby Channel wants to take the initiative (Chat Control), it calls the Acquire Control API. The channel that was previously an Active Channel will automatically switch to a Standby Channel. 
    # @param chat_id [String] The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [AcquireChatControlRequest] :acquire_chat_control_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def acquire_chat_control_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineModuleApi.acquire_chat_control ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling LineModuleApi.acquire_chat_control"
      end
      # resource path
      local_var_path = '/v2/bot/chat/{chatId}/control/acquire'.sub('{' + 'chatId' + '}', CGI.escape(chat_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'acquire_chat_control_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"LineModuleApi.acquire_chat_control",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineModuleApi#acquire_chat_control\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
    # @param [Hash] opts the optional parameters
    # @option opts [DetachModuleRequest] :detach_module_request 
    # @return [nil]
    def detach_module(opts = {})
      detach_module_with_http_info(opts)
      nil
    end

    # The module channel admin calls the Detach API to detach the module channel from a LINE Official Account.
    # @param [Hash] opts the optional parameters
    # @option opts [DetachModuleRequest] :detach_module_request 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def detach_module_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineModuleApi.detach_module ...'
      end
      # resource path
      local_var_path = '/v2/bot/channel/detach'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'detach_module_request'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"LineModuleApi.detach_module",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineModuleApi#detach_module\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array. 
    # @option opts [Integer] :limit Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (default to 100)
    # @return [GetModulesResponse]
    def get_modules(opts = {})
      data, _status_code, _headers = get_modules_with_http_info(opts)
      data
    end

    # Gets a list of basic information about the bots of multiple LINE Official Accounts that have attached module channels.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all basic information about the bots in one request, include this parameter to get the remaining array. 
    # @option opts [Integer] :limit Specify the maximum number of bots that you get basic information from. The default value is 100. Max value: 100  (default to 100)
    # @return [Array<(GetModulesResponse, Integer, Hash)>] GetModulesResponse data, response status code and response headers
    def get_modules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineModuleApi.get_modules ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling LineModuleApi.get_modules, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/v2/bot/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetModulesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"LineModuleApi.get_modules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineModuleApi#get_modules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
    # @param chat_id [String] The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def release_chat_control(chat_id, opts = {})
      release_chat_control_with_http_info(chat_id, opts)
      nil
    end

    # To return the initiative (Chat Control) of Active Channel to Primary Channel, call the Release Control API. 
    # @param chat_id [String] The &#x60;userId&#x60;, &#x60;roomId&#x60;, or &#x60;groupId&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def release_chat_control_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LineModuleApi.release_chat_control ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling LineModuleApi.release_chat_control"
      end
      # resource path
      local_var_path = '/v2/bot/chat/{chatId}/control/release'.sub('{' + 'chatId' + '}', CGI.escape(chat_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"LineModuleApi.release_chat_control",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LineModuleApi#release_chat_control\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
