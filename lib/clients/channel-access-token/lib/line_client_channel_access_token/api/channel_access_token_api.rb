=begin
#Channel Access Token API

#This document describes Channel Access Token API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module LINE::Client::ChannelAccessToken
  class ChannelAccessTokenApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets all valid channel access token key IDs.
    # @param client_assertion_type [String] &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60;
    # @param client_assertion [String] A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key.
    # @param [Hash] opts the optional parameters
    # @return [ChannelAccessTokenKeyIdsResponse]
    def gets_all_valid_channel_access_token_key_ids(client_assertion_type, client_assertion, opts = {})
      data, _status_code, _headers = gets_all_valid_channel_access_token_key_ids_with_http_info(client_assertion_type, client_assertion, opts)
      data
    end

    # Gets all valid channel access token key IDs.
    # @param client_assertion_type [String] &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60;
    # @param client_assertion [String] A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelAccessTokenKeyIdsResponse, Integer, Hash)>] ChannelAccessTokenKeyIdsResponse data, response status code and response headers
    def gets_all_valid_channel_access_token_key_ids_with_http_info(client_assertion_type, client_assertion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelAccessTokenApi.gets_all_valid_channel_access_token_key_ids ...'
      end
      # verify the required parameter 'client_assertion_type' is set
      if @api_client.config.client_side_validation && client_assertion_type.nil?
        fail ArgumentError, "Missing the required parameter 'client_assertion_type' when calling ChannelAccessTokenApi.gets_all_valid_channel_access_token_key_ids"
      end
      # verify the required parameter 'client_assertion' is set
      if @api_client.config.client_side_validation && client_assertion.nil?
        fail ArgumentError, "Missing the required parameter 'client_assertion' when calling ChannelAccessTokenApi.gets_all_valid_channel_access_token_key_ids"
      end
      # resource path
      local_var_path = '/oauth2/v2.1/tokens/kid'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_assertion_type'] = client_assertion_type
      query_params[:'client_assertion'] = client_assertion

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChannelAccessTokenKeyIdsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ChannelAccessTokenApi.gets_all_valid_channel_access_token_key_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelAccessTokenApi#gets_all_valid_channel_access_token_key_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue short-lived channel access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type &#x60;client_credentials&#x60;
    # @option opts [String] :client_id Channel ID.
    # @option opts [String] :client_secret Channel secret.
    # @return [IssueShortLivedChannelAccessTokenResponse]
    def issue_channel_token(opts = {})
      data, _status_code, _headers = issue_channel_token_with_http_info(opts)
      data
    end

    # Issue short-lived channel access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type &#x60;client_credentials&#x60;
    # @option opts [String] :client_id Channel ID.
    # @option opts [String] :client_secret Channel secret.
    # @return [Array<(IssueShortLivedChannelAccessTokenResponse, Integer, Hash)>] IssueShortLivedChannelAccessTokenResponse data, response status code and response headers
    def issue_channel_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelAccessTokenApi.issue_channel_token ...'
      end
      # resource path
      local_var_path = '/v2/oauth/accessToken'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['grant_type'] = opts[:'grant_type'] if !opts[:'grant_type'].nil?
      form_params['client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      form_params['client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueShortLivedChannelAccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ChannelAccessTokenApi.issue_channel_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelAccessTokenApi#issue_channel_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issues a channel access token that allows you to specify a desired expiration date. This method lets you use JWT assertion for authentication.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type client_credentials
    # @option opts [String] :client_assertion_type urn:ietf:params:oauth:client-assertion-type:jwt-bearer
    # @option opts [String] :client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
    # @return [IssueChannelAccessTokenResponse]
    def issue_channel_token_by_jwt(opts = {})
      data, _status_code, _headers = issue_channel_token_by_jwt_with_http_info(opts)
      data
    end

    # Issues a channel access token that allows you to specify a desired expiration date. This method lets you use JWT assertion for authentication.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type client_credentials
    # @option opts [String] :client_assertion_type urn:ietf:params:oauth:client-assertion-type:jwt-bearer
    # @option opts [String] :client_assertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
    # @return [Array<(IssueChannelAccessTokenResponse, Integer, Hash)>] IssueChannelAccessTokenResponse data, response status code and response headers
    def issue_channel_token_by_jwt_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelAccessTokenApi.issue_channel_token_by_jwt ...'
      end
      # resource path
      local_var_path = '/oauth2/v2.1/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['grant_type'] = opts[:'grant_type'] if !opts[:'grant_type'].nil?
      form_params['client_assertion_type'] = opts[:'client_assertion_type'] if !opts[:'client_assertion_type'].nil?
      form_params['client_assertion'] = opts[:'client_assertion'] if !opts[:'client_assertion'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueChannelAccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ChannelAccessTokenApi.issue_channel_token_by_jwt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelAccessTokenApi#issue_channel_token_by_jwt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke short-lived or long-lived channel access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token Channel access token
    # @return [nil]
    def revoke_channel_token(opts = {})
      revoke_channel_token_with_http_info(opts)
      nil
    end

    # Revoke short-lived or long-lived channel access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token Channel access token
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def revoke_channel_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelAccessTokenApi.revoke_channel_token ...'
      end
      # resource path
      local_var_path = '/v2/oauth/revoke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ChannelAccessTokenApi.revoke_channel_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelAccessTokenApi#revoke_channel_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke channel access token v2.1
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Channel ID
    # @option opts [String] :client_secret Channel Secret
    # @option opts [String] :access_token Channel access token
    # @return [nil]
    def revoke_channel_token_by_jwt(opts = {})
      revoke_channel_token_by_jwt_with_http_info(opts)
      nil
    end

    # Revoke channel access token v2.1
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Channel ID
    # @option opts [String] :client_secret Channel Secret
    # @option opts [String] :access_token Channel access token
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def revoke_channel_token_by_jwt_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelAccessTokenApi.revoke_channel_token_by_jwt ...'
      end
      # resource path
      local_var_path = '/oauth2/v2.1/revoke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      form_params['client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?
      form_params['access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ChannelAccessTokenApi.revoke_channel_token_by_jwt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelAccessTokenApi#revoke_channel_token_by_jwt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify the validity of short-lived and long-lived channel access tokens
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token A short-lived or long-lived channel access token.
    # @return [VerifyChannelAccessTokenResponse]
    def verify_channel_token(opts = {})
      data, _status_code, _headers = verify_channel_token_with_http_info(opts)
      data
    end

    # Verify the validity of short-lived and long-lived channel access tokens
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token A short-lived or long-lived channel access token.
    # @return [Array<(VerifyChannelAccessTokenResponse, Integer, Hash)>] VerifyChannelAccessTokenResponse data, response status code and response headers
    def verify_channel_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelAccessTokenApi.verify_channel_token ...'
      end
      # resource path
      local_var_path = '/v2/oauth/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyChannelAccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ChannelAccessTokenApi.verify_channel_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelAccessTokenApi#verify_channel_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # You can verify whether a Channel access token with a user-specified expiration (Channel Access Token v2.1) is valid.
    # @param access_token [String] Channel access token with a user-specified expiration (Channel Access Token v2.1).
    # @param [Hash] opts the optional parameters
    # @return [VerifyChannelAccessTokenResponse]
    def verify_channel_token_by_jwt(access_token, opts = {})
      data, _status_code, _headers = verify_channel_token_by_jwt_with_http_info(access_token, opts)
      data
    end

    # You can verify whether a Channel access token with a user-specified expiration (Channel Access Token v2.1) is valid.
    # @param access_token [String] Channel access token with a user-specified expiration (Channel Access Token v2.1).
    # @param [Hash] opts the optional parameters
    # @return [Array<(VerifyChannelAccessTokenResponse, Integer, Hash)>] VerifyChannelAccessTokenResponse data, response status code and response headers
    def verify_channel_token_by_jwt_with_http_info(access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChannelAccessTokenApi.verify_channel_token_by_jwt ...'
      end
      # verify the required parameter 'access_token' is set
      if @api_client.config.client_side_validation && access_token.nil?
        fail ArgumentError, "Missing the required parameter 'access_token' when calling ChannelAccessTokenApi.verify_channel_token_by_jwt"
      end
      # resource path
      local_var_path = '/oauth2/v2.1/verify'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'access_token'] = access_token

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyChannelAccessTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ChannelAccessTokenApi.verify_channel_token_by_jwt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelAccessTokenApi#verify_channel_token_by_jwt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
