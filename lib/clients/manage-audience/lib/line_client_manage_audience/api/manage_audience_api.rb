=begin
#LINE Messaging API

#This document describes LINE Messaging API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module LINE::Client::ManageAudience
  class ManageAudienceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate audience
    # @param audience_group_id [Integer] The audience ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activate_audience_group(audience_group_id, opts = {})
      activate_audience_group_with_http_info(audience_group_id, opts)
      nil
    end

    # Activate audience
    # @param audience_group_id [Integer] The audience ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def activate_audience_group_with_http_info(audience_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.activate_audience_group ...'
      end
      # verify the required parameter 'audience_group_id' is set
      if @api_client.config.client_side_validation && audience_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'audience_group_id' when calling ManageAudienceApi.activate_audience_group"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/{audienceGroupId}/activate'.sub('{' + 'audienceGroupId' + '}', CGI.escape(audience_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.activate_audience_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#activate_audience_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
    # @param add_audience_to_audience_group_request [AddAudienceToAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_audience_to_audience_group(add_audience_to_audience_group_request, opts = {})
      add_audience_to_audience_group_with_http_info(add_audience_to_audience_group_request, opts)
      nil
    end

    # Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
    # @param add_audience_to_audience_group_request [AddAudienceToAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_audience_to_audience_group_with_http_info(add_audience_to_audience_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.add_audience_to_audience_group ...'
      end
      # verify the required parameter 'add_audience_to_audience_group_request' is set
      if @api_client.config.client_side_validation && add_audience_to_audience_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_audience_to_audience_group_request' when calling ManageAudienceApi.add_audience_to_audience_group"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_audience_to_audience_group_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.add_audience_to_audience_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#add_audience_to_audience_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create audience for uploading user IDs (by JSON)
    # @param create_audience_group_request [CreateAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAudienceGroupResponse]
    def create_audience_group(create_audience_group_request, opts = {})
      data, _status_code, _headers = create_audience_group_with_http_info(create_audience_group_request, opts)
      data
    end

    # Create audience for uploading user IDs (by JSON)
    # @param create_audience_group_request [CreateAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAudienceGroupResponse, Integer, Hash)>] CreateAudienceGroupResponse data, response status code and response headers
    def create_audience_group_with_http_info(create_audience_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.create_audience_group ...'
      end
      # verify the required parameter 'create_audience_group_request' is set
      if @api_client.config.client_side_validation && create_audience_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_audience_group_request' when calling ManageAudienceApi.create_audience_group"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_audience_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAudienceGroupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.create_audience_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#create_audience_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create audience for click-based retargeting
    # @param create_click_based_audience_group_request [CreateClickBasedAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateClickBasedAudienceGroupResponse]
    def create_click_based_audience_group(create_click_based_audience_group_request, opts = {})
      data, _status_code, _headers = create_click_based_audience_group_with_http_info(create_click_based_audience_group_request, opts)
      data
    end

    # Create audience for click-based retargeting
    # @param create_click_based_audience_group_request [CreateClickBasedAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClickBasedAudienceGroupResponse, Integer, Hash)>] CreateClickBasedAudienceGroupResponse data, response status code and response headers
    def create_click_based_audience_group_with_http_info(create_click_based_audience_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.create_click_based_audience_group ...'
      end
      # verify the required parameter 'create_click_based_audience_group_request' is set
      if @api_client.config.client_side_validation && create_click_based_audience_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_click_based_audience_group_request' when calling ManageAudienceApi.create_click_based_audience_group"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/click'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_click_based_audience_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateClickBasedAudienceGroupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.create_click_based_audience_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#create_click_based_audience_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create audience for impression-based retargeting
    # @param create_imp_based_audience_group_request [CreateImpBasedAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateImpBasedAudienceGroupResponse]
    def create_imp_based_audience_group(create_imp_based_audience_group_request, opts = {})
      data, _status_code, _headers = create_imp_based_audience_group_with_http_info(create_imp_based_audience_group_request, opts)
      data
    end

    # Create audience for impression-based retargeting
    # @param create_imp_based_audience_group_request [CreateImpBasedAudienceGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateImpBasedAudienceGroupResponse, Integer, Hash)>] CreateImpBasedAudienceGroupResponse data, response status code and response headers
    def create_imp_based_audience_group_with_http_info(create_imp_based_audience_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.create_imp_based_audience_group ...'
      end
      # verify the required parameter 'create_imp_based_audience_group_request' is set
      if @api_client.config.client_side_validation && create_imp_based_audience_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_imp_based_audience_group_request' when calling ManageAudienceApi.create_imp_based_audience_group"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/imp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_imp_based_audience_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateImpBasedAudienceGroupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.create_imp_based_audience_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#create_imp_based_audience_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete audience
    # @param audience_group_id [Integer] The audience ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_audience_group(audience_group_id, opts = {})
      delete_audience_group_with_http_info(audience_group_id, opts)
      nil
    end

    # Delete audience
    # @param audience_group_id [Integer] The audience ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_audience_group_with_http_info(audience_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.delete_audience_group ...'
      end
      # verify the required parameter 'audience_group_id' is set
      if @api_client.config.client_side_validation && audience_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'audience_group_id' when calling ManageAudienceApi.delete_audience_group"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/{audienceGroupId}'.sub('{' + 'audienceGroupId' + '}', CGI.escape(audience_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.delete_audience_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#delete_audience_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets audience data.
    # @param audience_group_id [Integer] The audience ID.
    # @param [Hash] opts the optional parameters
    # @return [GetAudienceDataResponse]
    def get_audience_data(audience_group_id, opts = {})
      data, _status_code, _headers = get_audience_data_with_http_info(audience_group_id, opts)
      data
    end

    # Gets audience data.
    # @param audience_group_id [Integer] The audience ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAudienceDataResponse, Integer, Hash)>] GetAudienceDataResponse data, response status code and response headers
    def get_audience_data_with_http_info(audience_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.get_audience_data ...'
      end
      # verify the required parameter 'audience_group_id' is set
      if @api_client.config.client_side_validation && audience_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'audience_group_id' when calling ManageAudienceApi.get_audience_data"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/{audienceGroupId}'.sub('{' + 'audienceGroupId' + '}', CGI.escape(audience_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAudienceDataResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.get_audience_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#get_audience_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the authority level of the audience
    # @param [Hash] opts the optional parameters
    # @return [GetAudienceGroupAuthorityLevelResponse]
    def get_audience_group_authority_level(opts = {})
      data, _status_code, _headers = get_audience_group_authority_level_with_http_info(opts)
      data
    end

    # Get the authority level of the audience
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAudienceGroupAuthorityLevelResponse, Integer, Hash)>] GetAudienceGroupAuthorityLevelResponse data, response status code and response headers
    def get_audience_group_authority_level_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.get_audience_group_authority_level ...'
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/authorityLevel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAudienceGroupAuthorityLevelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.get_audience_group_authority_level",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#get_audience_group_authority_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets data for more than one audience.
    # @param page [Integer] The page to return when getting (paginated) results. Must be 1 or higher.
    # @param description [String] The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. 
    # @param status [AudienceGroupStatus] The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. 
    # @param size [Integer] The number of audiences per page. Default: 20 Max: 40 
    # @param includes_external_public_groups [Boolean] true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. 
    # @param create_route [AudienceGroupCreateRoute] How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. 
    # @param [Hash] opts the optional parameters
    # @return [GetAudienceGroupsResponse]
    def get_audience_groups(page, description, status, size, includes_external_public_groups, create_route, opts = {})
      data, _status_code, _headers = get_audience_groups_with_http_info(page, description, status, size, includes_external_public_groups, create_route, opts)
      data
    end

    # Gets data for more than one audience.
    # @param page [Integer] The page to return when getting (paginated) results. Must be 1 or higher.
    # @param description [String] The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion. 
    # @param status [AudienceGroupStatus] The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion. 
    # @param size [Integer] The number of audiences per page. Default: 20 Max: 40 
    # @param includes_external_public_groups [Boolean] true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel. 
    # @param create_route [AudienceGroupCreateRoute] How the audience was created. If omitted, all audiences are included.  &#x60;OA_MANAGER&#x60;: Return only audiences created with LINE Official Account Manager (opens new window). &#x60;MESSAGING_API&#x60;: Return only audiences created with Messaging API. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAudienceGroupsResponse, Integer, Hash)>] GetAudienceGroupsResponse data, response status code and response headers
    def get_audience_groups_with_http_info(page, description, status, size, includes_external_public_groups, create_route, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.get_audience_groups ...'
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling ManageAudienceApi.get_audience_groups"
      end
      if @api_client.config.client_side_validation && page < 1
        fail ArgumentError, 'invalid value for "page" when calling ManageAudienceApi.get_audience_groups, must be greater than or equal to 1.'
      end

      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling ManageAudienceApi.get_audience_groups"
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling ManageAudienceApi.get_audience_groups"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling ManageAudienceApi.get_audience_groups"
      end
      if @api_client.config.client_side_validation && size > 40
        fail ArgumentError, 'invalid value for "size" when calling ManageAudienceApi.get_audience_groups, must be smaller than or equal to 40.'
      end

      # verify the required parameter 'includes_external_public_groups' is set
      if @api_client.config.client_side_validation && includes_external_public_groups.nil?
        fail ArgumentError, "Missing the required parameter 'includes_external_public_groups' when calling ManageAudienceApi.get_audience_groups"
      end
      # verify the required parameter 'create_route' is set
      if @api_client.config.client_side_validation && create_route.nil?
        fail ArgumentError, "Missing the required parameter 'create_route' when calling ManageAudienceApi.get_audience_groups"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = page
      query_params[:'description'] = description
      query_params[:'status'] = status
      query_params[:'size'] = size
      query_params[:'includesExternalPublicGroups'] = includes_external_public_groups
      query_params[:'createRoute'] = create_route

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAudienceGroupsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.get_audience_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#get_audience_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change the authority level of the audience
    # @param update_audience_group_authority_level_request [UpdateAudienceGroupAuthorityLevelRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_audience_group_authority_level(update_audience_group_authority_level_request, opts = {})
      update_audience_group_authority_level_with_http_info(update_audience_group_authority_level_request, opts)
      nil
    end

    # Change the authority level of the audience
    # @param update_audience_group_authority_level_request [UpdateAudienceGroupAuthorityLevelRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_audience_group_authority_level_with_http_info(update_audience_group_authority_level_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.update_audience_group_authority_level ...'
      end
      # verify the required parameter 'update_audience_group_authority_level_request' is set
      if @api_client.config.client_side_validation && update_audience_group_authority_level_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_audience_group_authority_level_request' when calling ManageAudienceApi.update_audience_group_authority_level"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/authorityLevel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_audience_group_authority_level_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.update_audience_group_authority_level",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#update_audience_group_authority_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Renames an existing audience.
    # @param audience_group_id [Integer] The audience ID.
    # @param update_audience_group_description_request [UpdateAudienceGroupDescriptionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_audience_group_description(audience_group_id, update_audience_group_description_request, opts = {})
      update_audience_group_description_with_http_info(audience_group_id, update_audience_group_description_request, opts)
      nil
    end

    # Renames an existing audience.
    # @param audience_group_id [Integer] The audience ID.
    # @param update_audience_group_description_request [UpdateAudienceGroupDescriptionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_audience_group_description_with_http_info(audience_group_id, update_audience_group_description_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManageAudienceApi.update_audience_group_description ...'
      end
      # verify the required parameter 'audience_group_id' is set
      if @api_client.config.client_side_validation && audience_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'audience_group_id' when calling ManageAudienceApi.update_audience_group_description"
      end
      # verify the required parameter 'update_audience_group_description_request' is set
      if @api_client.config.client_side_validation && update_audience_group_description_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_audience_group_description_request' when calling ManageAudienceApi.update_audience_group_description"
      end
      # resource path
      local_var_path = '/v2/bot/audienceGroup/{audienceGroupId}/updateDescription'.sub('{' + 'audienceGroupId' + '}', CGI.escape(audience_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_audience_group_description_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ManageAudienceApi.update_audience_group_description",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManageAudienceApi#update_audience_group_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
