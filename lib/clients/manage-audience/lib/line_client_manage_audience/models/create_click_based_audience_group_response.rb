=begin
#LINE Messaging API

#This document describes LINE Messaging API.

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module LINE::Client::ManageAudience
  # Create audience for click-based retargeting
  class CreateClickBasedAudienceGroupResponse
    # The audience ID.
    attr_accessor :audience_group_id

    attr_accessor :type

    # The audience's name.
    attr_accessor :description

    # When the audience was created (in UNIX time).
    attr_accessor :created

    # The request ID that was specified when the audience was created.
    attr_accessor :request_id

    # The URL that was specified when the audience was created.
    attr_accessor :click_url

    # How the audience was created. `MESSAGING_API`: An audience created with Messaging API. 
    attr_accessor :create_route

    # Audience's update permission. Audiences linked to the same channel will be READ_WRITE.  - `READ`: Can use only. - `READ_WRITE`: Can use and update. 
    attr_accessor :permission

    # Time of audience expiration. Only returned for specific audiences.
    attr_accessor :expire_timestamp

    # The value indicating the type of account to be sent, as specified when creating the audience for uploading user IDs. One of:  true: Accounts are specified with IFAs. false (default): Accounts are specified with user IDs. 
    attr_accessor :is_ifa_audience

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'audience_group_id' => :'audienceGroupId',
        :'type' => :'type',
        :'description' => :'description',
        :'created' => :'created',
        :'request_id' => :'requestId',
        :'click_url' => :'clickUrl',
        :'create_route' => :'createRoute',
        :'permission' => :'permission',
        :'expire_timestamp' => :'expireTimestamp',
        :'is_ifa_audience' => :'isIfaAudience'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'audience_group_id' => :'Integer',
        :'type' => :'AudienceGroupType',
        :'description' => :'String',
        :'created' => :'Integer',
        :'request_id' => :'String',
        :'click_url' => :'String',
        :'create_route' => :'String',
        :'permission' => :'String',
        :'expire_timestamp' => :'Integer',
        :'is_ifa_audience' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LINE::Client::ManageAudience::CreateClickBasedAudienceGroupResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LINE::Client::ManageAudience::CreateClickBasedAudienceGroupResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'audience_group_id')
        self.audience_group_id = attributes[:'audience_group_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'request_id')
        self.request_id = attributes[:'request_id']
      end

      if attributes.key?(:'click_url')
        self.click_url = attributes[:'click_url']
      end

      if attributes.key?(:'create_route')
        self.create_route = attributes[:'create_route']
      end

      if attributes.key?(:'permission')
        self.permission = attributes[:'permission']
      end

      if attributes.key?(:'expire_timestamp')
        self.expire_timestamp = attributes[:'expire_timestamp']
      end

      if attributes.key?(:'is_ifa_audience')
        self.is_ifa_audience = attributes[:'is_ifa_audience']
      else
        self.is_ifa_audience = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      create_route_validator = EnumAttributeValidator.new('String', ["MESSAGING_API"])
      return false unless create_route_validator.valid?(@create_route)
      permission_validator = EnumAttributeValidator.new('String', ["READ", "READ_WRITE"])
      return false unless permission_validator.valid?(@permission)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] create_route Object to be assigned
    def create_route=(create_route)
      validator = EnumAttributeValidator.new('String', ["MESSAGING_API"])
      unless validator.valid?(create_route)
        fail ArgumentError, "invalid value for \"create_route\", must be one of #{validator.allowable_values}."
      end
      @create_route = create_route
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] permission Object to be assigned
    def permission=(permission)
      validator = EnumAttributeValidator.new('String', ["READ", "READ_WRITE"])
      unless validator.valid?(permission)
        fail ArgumentError, "invalid value for \"permission\", must be one of #{validator.allowable_values}."
      end
      @permission = permission
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          audience_group_id == o.audience_group_id &&
          type == o.type &&
          description == o.description &&
          created == o.created &&
          request_id == o.request_id &&
          click_url == o.click_url &&
          create_route == o.create_route &&
          permission == o.permission &&
          expire_timestamp == o.expire_timestamp &&
          is_ifa_audience == o.is_ifa_audience
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [audience_group_id, type, description, created, request_id, click_url, create_route, permission, expire_timestamp, is_ifa_audience].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LINE::Client::ManageAudience.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
